** heap **
⊥Heap

** context **
⊥Elem

** allocated location set **
mayAlloc: (⊥(location)), mustAlloc: (Top(location))


-----CFG-----


function[0] top-level {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] ___fileFn0___ := function (1) @ #65, #66
    [1] ___fileFn1___ := function (6) @ #633, #634
    [2] Square := function (31) @ #642, #643
    [3] Board := function (32) @ #644, #645
    [4] Game := function (33) @ #662, #663
    [5] calculateWinner := function (34) @ #683, #684
    [6] <>obj<>933 := @ToObject(___fileFn0___) @ #685
    [7] <>arguments<>934 := allocArg(0) @ #686
    [8] <>fun<>935 := @GetBase(___fileFn0___)
    [9] <>this<> := enterCode(<>fun<>935)

  Call[1] -> ExitExc
    [0] call(<>obj<>933, <>this<>, <>arguments<>934) @ #687

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [5], ExitExc
    [0] ___imports0___ := <>Global<>ignore177
    [1] <>obj<>936 := @ToObject(___fileFn1___) @ #688
    [2] <>arguments<>937 := allocArg(0) @ #689
    [3] <>fun<>938 := @GetBase(___fileFn1___)
    [4] <>this<> := enterCode(<>fun<>938)

  Call[5] -> ExitExc
    [0] call(<>obj<>936, <>this<>, <>arguments<>937) @ #690

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [9], ExitExc
    [0] ___imports1___ := <>Global<>ignore178
    [1] noop(StartOfFile)
    [2] <>obj<>939 := @ToObject(___imports0___) @ #691
    [3] React := <>obj<>939["___default___"]
    [4] <>obj<>940 := @ToObject(___imports1___) @ #692
    [5] ReactDOM := <>obj<>940["___default___"]
    [6] <>obj<>941 := @ToObject(Board) @ #693
    [7] <>obj<>942 := @ToObject(Object) @ #694
    [8] <>obj<>943 := @ToObject(React) @ #695
    [9] <>obj<>944 := @ToObject(<>obj<>943["Component"]) @ #696
    [10] <>temp<>945 := <>obj<>944["prototype"]
    [11] <>arguments<>946 := allocArg(1) @ #697
    [12] <>arguments<>946["0"] := <>temp<>945
    [13] <>fun<>947 := @ToObject(<>obj<>942["create"]) @ #698
    [14] <>this<> := enterCode(<>obj<>942)

  Call[9] -> ExitExc
    [0] call(<>fun<>947, <>this<>, <>arguments<>946) @ #699

  AfterCall[10] -> [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> [13], ExitExc
    [0] <>obj<>941["prototype"] := <>Global<>ignore181
    [1] <>obj<>948 := @ToObject(Board) @ #700
    [2] <>obj<>949 := @ToObject(<>obj<>948["prototype"]) @ #701
    [3] <>obj<>949["constructor"] := Board
    [4] <>obj<>950 := @ToObject(Board) @ #702
    [5] <>obj<>951 := @ToObject(<>obj<>950["prototype"]) @ #703
    [6] <>Global<>ignore183 := function (35) @ #719, #720
    [7] <>obj<>951["renderSquare"] := <>Global<>ignore183
    [8] <>obj<>973 := @ToObject(Board) @ #721
    [9] <>obj<>974 := @ToObject(<>obj<>973["prototype"]) @ #722
    [10] <>Global<>ignore184 := function (37) @ #778, #779
    [11] <>obj<>974["render"] := <>Global<>ignore184
    [12] <>obj<>1046 := @ToObject(Game) @ #780
    [13] <>obj<>1047 := @ToObject(Object) @ #781
    [14] <>obj<>1048 := @ToObject(React) @ #782
    [15] <>obj<>1049 := @ToObject(<>obj<>1048["Component"]) @ #783
    [16] <>temp<>1050 := <>obj<>1049["prototype"]
    [17] <>arguments<>1051 := allocArg(1) @ #784
    [18] <>arguments<>1051["0"] := <>temp<>1050
    [19] <>fun<>1052 := @ToObject(<>obj<>1047["create"]) @ #785
    [20] <>this<> := enterCode(<>obj<>1047)

  Call[13] -> ExitExc
    [0] call(<>fun<>1052, <>this<>, <>arguments<>1051) @ #786

  AfterCall[14] -> [16]

  AfterCatch[15] -> ExitExc

  Block[16] -> [17], ExitExc
    [0] <>obj<>1046["prototype"] := <>Global<>ignore185
    [1] <>obj<>1053 := @ToObject(Game) @ #787
    [2] <>obj<>1054 := @ToObject(<>obj<>1053["prototype"]) @ #788
    [3] <>obj<>1054["constructor"] := Game
    [4] <>obj<>1055 := @ToObject(Game) @ #789
    [5] <>obj<>1056 := @ToObject(<>obj<>1055["prototype"]) @ #790
    [6] <>Global<>ignore187 := function (38) @ #827, #828
    [7] <>obj<>1056["handleClick"] := <>Global<>ignore187
    [8] <>obj<>1100 := @ToObject(Game) @ #829
    [9] <>obj<>1101 := @ToObject(<>obj<>1100["prototype"]) @ #830
    [10] <>Global<>ignore193 := function (39) @ #836, #837
    [11] <>obj<>1101["jumpTo"] := <>Global<>ignore193
    [12] <>obj<>1109 := @ToObject(Game) @ #838
    [13] <>obj<>1110 := @ToObject(<>obj<>1109["prototype"]) @ #839
    [14] <>Global<>ignore195 := function (40) @ #908, #909
    [15] <>obj<>1110["render"] := <>Global<>ignore195
    [16] <>obj<>1210 := @ToObject(ReactDOM) @ #910
    [17] <>obj<>1211 := @ToObject(React) @ #911
    [18] <>temp<>1212 := Game
    [19] <>temp<>1213 := null
    [20] <>arguments<>1214 := allocArg(2) @ #912
    [21] <>arguments<>1214["0"] := <>temp<>1212
    [22] <>arguments<>1214["1"] := <>temp<>1213
    [23] <>fun<>1215 := @ToObject(<>obj<>1211["createElement"]) @ #913
    [24] <>this<> := enterCode(<>obj<>1211)

  Call[17] -> ExitExc
    [0] call(<>fun<>1215, <>this<>, <>arguments<>1214) @ #914

  AfterCall[18] -> [20]

  AfterCatch[19] -> ExitExc

  Block[20] -> [21], ExitExc
    [0] <>obj<>1217 := @ToObject(document) @ #915
    [1] <>temp<>1218 := "root"
    [2] <>arguments<>1219 := allocArg(1) @ #916
    [3] <>arguments<>1219["0"] := <>temp<>1218
    [4] <>fun<>1220 := @ToObject(<>obj<>1217["getElementById"]) @ #917
    [5] <>this<> := enterCode(<>obj<>1217)

  Call[21] -> ExitExc
    [0] call(<>fun<>1220, <>this<>, <>arguments<>1219) @ #918

  AfterCall[22] -> [24]

  AfterCatch[23] -> ExitExc

  Block[24] -> [25], ExitExc
    [0] <>arguments<>1222 := allocArg(2) @ #919
    [1] <>arguments<>1222["0"] := <>temp<>1216
    [2] <>arguments<>1222["1"] := <>temp<>1221
    [3] <>fun<>1223 := @ToObject(<>obj<>1210["render"]) @ #920
    [4] <>this<> := enterCode(<>obj<>1210)

  Call[25] -> ExitExc
    [0] call(<>fun<>1223, <>this<>, <>arguments<>1222) @ #921

  AfterCall[26] -> [28]

  AfterCatch[27] -> ExitExc

  Block[28] -> Exit
    [0] noop(EndOfFile)

  Exit[-2]

  ExitExc[-3]

}

function[1] ___fileFn0___ {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := alloc() @ #1
    [1] <>___exports___<>1 := <>Global<>ignore1
    [2] noop(StartOfFile)
    [3] <>temp<>56 := function (2) @ #38, #39
    [4] <>temp<>57 := alloc() @ #40
    [5] <>temp<>57["object"] := "object"
    [6] <>temp<>57["string"] := "string"
    [7] <>temp<>57["number"] := "number"
    [8] <>Global<>ignore2 := alloc() @ #41
    [9] <>Global<>ignore2["createElement"] := <>temp<>56
    [10] <>Global<>ignore2["PropTypes"] := <>temp<>57
    [11] <>React<>2 := <>Global<>ignore2
    [12] <>obj<>58 := @ToObject(<>React<>2) @ #42
    [13] <>Global<>ignore17 := function (3) @ #43, #44
    [14] <>obj<>58["Component"] := <>Global<>ignore17
    [15] <>obj<>61 := @ToObject(<>React<>2) @ #45
    [16] <>obj<>62 := @ToObject(<>obj<>61["Component"]) @ #46
    [17] <>obj<>63 := @ToObject(<>obj<>62["prototype"]) @ #47
    [18] <>obj<>63["__class__"] := true
    [19] <>obj<>64 := @ToObject(<>React<>2) @ #48
    [20] <>obj<>65 := @ToObject(<>obj<>64["Component"]) @ #49
    [21] <>obj<>66 := @ToObject(<>obj<>65["prototype"]) @ #50
    [22] <>Global<>ignore19 := function (4) @ #55, #56
    [23] <>obj<>66["setState"] := <>Global<>ignore19
    [24] <>obj<>78 := @ToObject(<>React<>2) @ #57
    [25] <>obj<>79 := @ToObject(<>obj<>78["Component"]) @ #58
    [26] <>obj<>80 := @ToObject(<>obj<>79["prototype"]) @ #59
    [27] <>Global<>ignore21 := function (5) @ #60, #61
    [28] <>obj<>80["componentDidMount"] := <>Global<>ignore21
    [29] <>obj<>83 := @ToObject(<>___exports___<>1) @ #62
    [30] <>obj<>83["___default___"] := <>React<>2
    [31] <>obj<>84 := @ToObject(<>React<>2) @ #63
    [32] <>Component<>3 := <>obj<>84["Component"]
    [33] <>obj<>85 := @ToObject(<>___exports___<>1) @ #64
    [34] <>obj<>85["Component"] := <>Component<>3
    [35] noop(EndOfFile)
    [36] return(<>___exports___<>1)

  Exit[-2]

  ExitExc[-3]

}

function[2] <>funexpr@2:18-35:4<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(<>props<>6 === null)
    [1] <>Global<>ignore3 := alloc() @ #2
    [2] <>props<>6 := <>Global<>ignore3

  Block[2] -> [3], ExitExc
    [0] assert(<>props<>6 !== null)

  Block[3] -> [5], [4], ExitExc
    [0] <>obj<>14 := @ToObject(<>type<>5) @ #3

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>14["defaultProps"] !== undefined)
    [1] <>obj<>15 := @ToObject(<>type<>5) @ #4
    [2] <>obj<>16 := <>obj<>15["defaultProps"]
    [3] <>iterator<>17 := @iteratorInit(<>obj<>16) @ #5
    [4] <>cond1<>18 := @iteratorHasNext(<>obj<>16, <>iterator<>17)

  Block[5] -> [14], ExitExc
    [0] assert(<>obj<>14["defaultProps"] === undefined)

  LoopHead[6] -> [8], [7]

  Block[7] -> [10], [9], ExitExc
    [0] assert(<>cond1<>18)
    [1] <>key<>19 := @iteratorNext(<>obj<>16, <>iterator<>17)
    [2] <>key<>8 := <>key<>19
    [3] <>obj<>20 := @ToObject(<>props<>6) @ #6

  Block[8] -> [13], ExitExc
    [0] assert(! <>cond1<>18)

  Block[9] -> [11], ExitExc
    [0] assert(<>obj<>20[<>key<>8] === undefined)
    [1] <>obj<>21 := @ToObject(<>props<>6) @ #7
    [2] <>obj<>22 := @ToObject(<>type<>5) @ #8
    [3] <>obj<>23 := @ToObject(<>obj<>22["defaultProps"]) @ #9
    [4] <>obj<>21[<>key<>8] := <>obj<>23[<>key<>8]

  Block[10] -> [11], ExitExc
    [0] assert(<>obj<>20[<>key<>8] !== undefined)

  Block[11] -> [12]

  LCont[12] -> [6]
    [0] <>cond1<>18 := @iteratorHasNext(<>obj<>16, <>iterator<>17)

  LBreak[13] -> [14]

  Block[14] -> [15], ExitExc
    [0] <>Global<>ignore5 := allocArray(0) @ #10
    [1] <>childArray<>9 := <>Global<>ignore5
    [2] <>i<>10 := 2
    [3] <>y<>24 := <>i<>10
    [4] <>obj<>25 := @ToObject(<>arguments<>13) @ #11

  LoopHead[15] -> [17], [16]

  Block[16] -> [19], [18], ExitExc
    [0] assert(<>y<>24 < <>obj<>25["length"])
    [1] <>obj<>26 := @ToObject(<>arguments<>13) @ #12
    [2] <>child<>11 := <>obj<>26[<>i<>10]

  Block[17] -> [51], ExitExc
    [0] assert(! <>y<>24 < <>obj<>25["length"])

  Block[18] -> [50], ExitExc
    [0] assert(<>child<>11 === null)

  Block[19] -> [20], ExitExc
    [0] assert(<>child<>11 !== null)

  Block[20] -> [22], [21]

  Block[21] -> [27], ExitExc
    [0] assert(typeof <>child<>11 === "string")

  Block[22] -> [23], ExitExc
    [0] assert(typeof <>child<>11 !== "string")

  Block[23] -> [25], [24]

  Block[24] -> [27], ExitExc
    [0] assert(typeof <>child<>11 === "number")

  Block[25] -> [26], ExitExc
    [0] assert(typeof <>child<>11 !== "number")

  Block[26] -> [32]

  Branch[27] -> [28], ExitExc
    [0] <>obj<>27 := @ToObject(<>child<>11) @ #13
    [1] <>arguments<>28 := allocArg(0) @ #14
    [2] <>fun<>29 := @ToObject(<>obj<>27["toString"]) @ #15
    [3] <>this<> := enterCode(<>obj<>27)

  Call[28] -> ExitExc
    [0] call(<>fun<>29, <>this<>, <>arguments<>28) @ #16

  AfterCall[29] -> [31]

  AfterCatch[30] -> ExitExc

  Block[31] -> [32], ExitExc
    [0] <>temp<>31 := allocArray(0) @ #17
    [1] <>temp<>32 := alloc() @ #18
    [2] <>temp<>32["text"] := <>temp<>30
    [3] <>temp<>32["children"] := <>temp<>31
    [4] <>Global<>ignore10 := alloc() @ #19
    [5] <>Global<>ignore10["type"] := "plaintext"
    [6] <>Global<>ignore10["props"] := <>temp<>32
    [7] <>child<>11 := <>Global<>ignore10

  Branch[32] -> [33], ExitExc
    [0] <>obj<>33 := @ToObject(Array) @ #20
    [1] <>temp<>34 := <>child<>11
    [2] <>arguments<>35 := allocArg(1) @ #21
    [3] <>arguments<>35["0"] := <>temp<>34
    [4] <>fun<>36 := @ToObject(<>obj<>33["isArray"]) @ #22
    [5] <>this<> := enterCode(<>obj<>33)

  Call[33] -> ExitExc
    [0] call(<>fun<>36, <>this<>, <>arguments<>35) @ #23

  AfterCall[34] -> [37], [36]

  AfterCatch[35] -> ExitExc

  Block[36] -> [38], ExitExc
    [0] assert(<>new<>37)
    [1] <>j<>12 := 0
    [2] <>y<>38 := <>j<>12
    [3] <>obj<>39 := @ToObject(<>child<>11) @ #24

  Block[37] -> [47], ExitExc
    [0] assert(! <>new<>37)
    [1] <>obj<>47 := @ToObject(<>childArray<>9) @ #31
    [2] <>temp<>48 := <>child<>11
    [3] <>arguments<>49 := allocArg(1) @ #32
    [4] <>arguments<>49["0"] := <>temp<>48
    [5] <>fun<>50 := @ToObject(<>obj<>47["push"]) @ #33
    [6] <>this<> := enterCode(<>obj<>47)

  LoopHead[38] -> [40], [39]

  Block[39] -> [41], ExitExc
    [0] assert(<>y<>38 < <>obj<>39["length"])
    [1] <>obj<>40 := @ToObject(<>childArray<>9) @ #25
    [2] <>obj<>41 := @ToObject(<>child<>11) @ #26
    [3] <>temp<>42 := <>obj<>41[<>j<>12]
    [4] <>arguments<>43 := allocArg(1) @ #27
    [5] <>arguments<>43["0"] := <>temp<>42
    [6] <>fun<>44 := @ToObject(<>obj<>40["push"]) @ #28
    [7] <>this<> := enterCode(<>obj<>40)

  Block[40] -> [45], ExitExc
    [0] assert(! <>y<>38 < <>obj<>39["length"])

  Call[41] -> ExitExc
    [0] call(<>fun<>44, <>this<>, <>arguments<>43) @ #29

  AfterCall[42] -> [44]

  AfterCatch[43] -> ExitExc

  LCont[44] -> [38], ExitExc
    [0] <>old<>45 := <>j<>12
    [1] <>new<>46 := @ToNumber(<>old<>45)
    [2] <>j<>12 := <>new<>46 + 1
    [3] <>Global<>ignore13 := <>new<>46
    [4] <>y<>38 := <>j<>12
    [5] <>obj<>39 := @ToObject(<>child<>11) @ #30

  LBreak[45] -> [46]

  Block[46] -> [50]

  Call[47] -> ExitExc
    [0] call(<>fun<>50, <>this<>, <>arguments<>49) @ #34

  AfterCall[48] -> [46]

  AfterCatch[49] -> ExitExc

  LCont[50] -> [15], ExitExc
    [0] <>old<>51 := <>i<>10
    [1] <>new<>52 := @ToNumber(<>old<>51)
    [2] <>i<>10 := <>new<>52 + 1
    [3] <>Global<>ignore8 := <>new<>52
    [4] <>y<>24 := <>i<>10
    [5] <>obj<>25 := @ToObject(<>arguments<>13) @ #35

  LBreak[51] -> Exit, ExitExc
    [0] <>obj<>53 := @ToObject(<>props<>6) @ #36
    [1] <>obj<>53["children"] := <>childArray<>9
    [2] <>new1<>54 := alloc() @ #37
    [3] <>new1<>54["type"] := <>type<>5
    [4] <>new1<>54["props"] := <>props<>6
    [5] return(<>new1<>54)

  Exit[-2]

  ExitExc[-3]

}

function[3] React.Component<>funexpr@45:19-32<> {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[4] React.Component.prototype.setState<>funexpr@47:38-51:2<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>70 := <>partialState<>67
    [1] <>iterator<>71 := @iteratorInit(<>obj<>70) @ #51
    [2] <>cond1<>72 := @iteratorHasNext(<>obj<>70, <>iterator<>71)

  LoopHead[1] -> [3], [2]

  Block[2] -> [4], ExitExc
    [0] assert(<>cond1<>72)
    [1] <>key<>73 := @iteratorNext(<>obj<>70, <>iterator<>71)
    [2] <>prop<>68 := <>key<>73
    [3] <>obj<>74 := @ToObject(this) @ #52
    [4] <>obj<>75 := @ToObject(<>obj<>74["state"]) @ #53
    [5] <>obj<>76 := @ToObject(<>partialState<>67) @ #54
    [6] <>obj<>75[<>prop<>68] := <>obj<>76[<>prop<>68]

  Block[3] -> [5], ExitExc
    [0] assert(! <>cond1<>72)

  LCont[4] -> [1]
    [0] <>cond1<>72 := @iteratorHasNext(<>obj<>70, <>iterator<>71)

  LBreak[5] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[5] React.Component.prototype.componentDidMount<>funexpr@52:47-60<> {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[6] ___fileFn1___ {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>ReactState<>86 := function (7) @ #74, #75
    [1] <>CompDesc<>87 := function (8) @ #79, #80
    [2] <>MountedCompDesc<>88 := function (9) @ #83, #84
    [3] <>Global<>ignore34 := alloc() @ #85
    [4] <>___exports___<>89 := <>Global<>ignore34
    [5] noop(StartOfFile)
    [6] <>obj<>109 := @ToObject(<>ReactState<>86) @ #86
    [7] <>obj<>110 := @ToObject(<>obj<>109["prototype"]) @ #87
    [8] <>Global<>ignore35 := function (10) @ #96, #97
    [9] <>obj<>110["mountElement"] := <>Global<>ignore35
    [10] <>obj<>123 := @ToObject(<>ReactState<>86) @ #98
    [11] <>obj<>124 := @ToObject(<>obj<>123["prototype"]) @ #99
    [12] <>Global<>ignore38 := function (11) @ #144, #145
    [13] <>obj<>124["mount"] := <>Global<>ignore38
    [14] <>obj<>182 := @ToObject(<>ReactState<>86) @ #146
    [15] <>obj<>183 := @ToObject(<>obj<>182["prototype"]) @ #147
    [16] <>Global<>ignore49 := function (12) @ #166, #167
    [17] <>obj<>183["mountSeq"] := <>Global<>ignore49
    [18] <>obj<>206 := @ToObject(<>ReactState<>86) @ #168
    [19] <>obj<>207 := @ToObject(<>obj<>206["prototype"]) @ #169
    [20] <>Global<>ignore53 := function (13) @ #175, #176
    [21] <>obj<>207["mounted"] := <>Global<>ignore53
    [22] <>obj<>216 := @ToObject(<>ReactState<>86) @ #177
    [23] <>obj<>217 := @ToObject(<>obj<>216["prototype"]) @ #178
    [24] <>Global<>ignore55 := function (14) @ #192, #193
    [25] <>obj<>217["unmount"] := <>Global<>ignore55
    [26] <>obj<>235 := @ToObject(<>ReactState<>86) @ #194
    [27] <>obj<>236 := @ToObject(<>obj<>235["prototype"]) @ #195
    [28] <>Global<>ignore60 := function (15) @ #210, #211
    [29] <>obj<>236["unmountSeq"] := <>Global<>ignore60
    [30] <>obj<>254 := @ToObject(<>ReactState<>86) @ #212
    [31] <>obj<>255 := @ToObject(<>obj<>254["prototype"]) @ #213
    [32] <>Global<>ignore64 := function (16) @ #214, #215
    [33] <>obj<>255["unmounted"] := <>Global<>ignore64
    [34] <>obj<>259 := @ToObject(<>ReactState<>86) @ #216
    [35] <>obj<>260 := @ToObject(<>obj<>259["prototype"]) @ #217
    [36] <>Global<>ignore65 := function (17) @ #242, #243
    [37] <>obj<>260["render"] := <>Global<>ignore65
    [38] <>obj<>291 := @ToObject(<>ReactState<>86) @ #244
    [39] <>obj<>292 := @ToObject(<>obj<>291["prototype"]) @ #245
    [40] <>Global<>ignore69 := function (18) @ #263, #264
    [41] <>obj<>292["rerender"] := <>Global<>ignore69
    [42] <>obj<>317 := @ToObject(<>ReactState<>86) @ #265
    [43] <>obj<>318 := @ToObject(<>obj<>317["prototype"]) @ #266
    [44] <>Global<>ignore72 := function (19) @ #303, #304
    [45] <>obj<>318["reconcileSeq"] := <>Global<>ignore72
    [46] <>obj<>370 := @ToObject(<>ReactState<>86) @ #305
    [47] <>obj<>371 := @ToObject(<>obj<>370["prototype"]) @ #306
    [48] <>Global<>ignore77 := function (20) @ #343, #344
    [49] <>obj<>371["reconcile"] := <>Global<>ignore77
    [50] <>obj<>429 := @ToObject(<>ReactState<>86) @ #345
    [51] <>obj<>430 := @ToObject(<>obj<>429["prototype"]) @ #346
    [52] <>Global<>ignore87 := function (21) @ #351, #352
    [53] <>obj<>430["reconciled"] := <>Global<>ignore87
    [54] <>obj<>439 := @ToObject(<>ReactState<>86) @ #353
    [55] <>obj<>440 := @ToObject(<>obj<>439["prototype"]) @ #354
    [56] <>Global<>ignore90 := function (22) @ #389, #390
    [57] <>obj<>440["setState"] := <>Global<>ignore90
    [58] <>obj<>495 := @ToObject(<>ReactState<>86) @ #391
    [59] <>obj<>496 := @ToObject(<>obj<>495["prototype"]) @ #392
    [60] <>Global<>ignore101 := function (23) @ #457, #458
    [61] <>obj<>496["extractCompDesc"] := <>Global<>ignore101
    [62] <>obj<>595 := @ToObject(<>ReactState<>86) @ #459
    [63] <>obj<>596 := @ToObject(<>obj<>595["prototype"]) @ #460
    [64] <>Global<>ignore112 := function (24) @ #472, #473
    [65] <>obj<>596["printState"] := <>Global<>ignore112
    [66] <>obj<>619 := @ToObject(<>ReactState<>86) @ #474
    [67] <>obj<>620 := @ToObject(<>obj<>619["prototype"]) @ #475
    [68] <>Global<>ignore119 := function (25) @ #480, #481
    [69] <>obj<>620["printHtml"] := <>Global<>ignore119
    [70] <>obj<>631 := @ToObject(<>ReactState<>86) @ #482
    [71] <>obj<>632 := @ToObject(<>obj<>631["prototype"]) @ #483
    [72] <>Global<>ignore120 := function (26) @ #524, #525
    [73] <>obj<>632["printHtmlRec"] := <>Global<>ignore120
    [74] <>obj<>700 := @ToObject(<>CompDesc<>87) @ #526
    [75] <>obj<>701 := @ToObject(<>obj<>700["prototype"]) @ #527
    [76] <>Global<>ignore139 := function (27) @ #551, #552
    [77] <>obj<>701["toString"] := <>Global<>ignore139
    [78] <>obj<>747 := @ToObject(<>MountedCompDesc<>88) @ #553
    [79] <>obj<>748 := @ToObject(<>obj<>747["prototype"]) @ #554
    [80] <>Global<>ignore152 := function (28) @ #561, #562
    [81] <>obj<>748["toString"] := <>Global<>ignore152
    [82] <>temp<>786 := function (29) @ #579, #580
    [83] <>temp<>845 := function (30) @ #629, #630
    [84] <>Global<>ignore153 := alloc() @ #631
    [85] <>Global<>ignore153["render"] := <>temp<>786
    [86] <>Global<>ignore153["oldRender"] := <>temp<>845
    [87] <>ReactDOM<>90 := <>Global<>ignore153
    [88] <>obj<>846 := @ToObject(<>___exports___<>89) @ #632
    [89] <>obj<>846["___default___"] := <>ReactDOM<>90
    [90] noop(EndOfFile)
    [91] return(<>___exports___<>89)

  Exit[-2]

  ExitExc[-3]

}

function[7] ReactState {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>93 := @ToObject(this) @ #67
    [1] <>Global<>ignore25 := alloc() @ #68
    [2] <>obj<>93["heap"] := <>Global<>ignore25
    [3] <>obj<>94 := @ToObject(this) @ #69
    [4] <>Global<>ignore26 := alloc() @ #70
    [5] <>obj<>94["shapeMap"] := <>Global<>ignore26
    [6] <>obj<>95 := @ToObject(this) @ #71
    [7] <>Global<>ignore27 := alloc() @ #72
    [8] <>obj<>95["stateMap"] := <>Global<>ignore27
    [9] <>obj<>96 := @ToObject(this) @ #73
    [10] <>obj<>96["nextLoc"] := 0

  Exit[-2]

  ExitExc[-3]

}

function[8] CompDesc {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>101 := @ToObject(this) @ #76
    [1] <>obj<>101["type"] := <>type<>97
    [2] <>obj<>102 := @ToObject(this) @ #77
    [3] <>obj<>102["props"] := <>props<>98
    [4] <>obj<>103 := @ToObject(this) @ #78
    [5] <>obj<>103["children"] := <>children<>99

  Exit[-2]

  ExitExc[-3]

}

function[9] MountedCompDesc {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>107 := @ToObject(this) @ #81
    [1] <>obj<>107["comp"] := <>comp<>104
    [2] <>obj<>108 := @ToObject(this) @ #82
    [3] <>obj<>108["loc"] := <>loc<>105

  Exit[-2]

  ExitExc[-3]

}

function[10] mountElement {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>114 := @ToObject(this) @ #88
    [1] <>temp<>115 := <>elt<>111
    [2] <>arguments<>116 := allocArg(1) @ #89
    [3] <>arguments<>116["0"] := <>temp<>115
    [4] <>fun<>117 := @ToObject(<>obj<>114["extractCompDesc"]) @ #90
    [5] <>this<> := enterCode(<>obj<>114)

  Call[1] -> ExitExc
    [0] call(<>fun<>117, <>this<>, <>arguments<>116) @ #91

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [5], ExitExc
    [0] <>desc<>112 := <>Global<>ignore36
    [1] <>obj<>118 := @ToObject(this) @ #92
    [2] <>temp<>119 := <>desc<>112
    [3] <>arguments<>120 := allocArg(1) @ #93
    [4] <>arguments<>120["0"] := <>temp<>119
    [5] <>fun<>121 := @ToObject(<>obj<>118["mount"]) @ #94
    [6] <>this<> := enterCode(<>obj<>118)

  Call[5] -> ExitExc
    [0] call(<>fun<>121, <>this<>, <>arguments<>120) @ #95

  AfterCall[6] -> Exit

  AfterCatch[7] -> ExitExc

  Exit[-2]

  ExitExc[-3]

}

function[11] mount {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>132 := @ToObject(this) @ #100
    [1] <>old<>133 := <>obj<>132["nextLoc"]
    [2] <>new<>134 := @ToNumber(<>old<>133)
    [3] <>obj<>132["nextLoc"] := <>new<>134 + 1
    [4] <>loc<>126 := <>new<>134
    [5] <>fun<>135 := @ToObject(<>MountedCompDesc<>88) @ #101
    [6] <>temp<>136 := <>comp<>125
    [7] <>temp<>137 := <>loc<>126
    [8] <>arguments<>138 := allocArg(2) @ #102
    [9] <>arguments<>138["0"] := <>temp<>136
    [10] <>arguments<>138["1"] := <>temp<>137
    [11] <>proto<>139 := <>fun<>135["prototype"]
    [12] <>obj<>140 := alloc(<>proto<>139) @ #103

  Call[1] -> ExitExc
    [0] construct(<>fun<>135, <>obj<>140, <>arguments<>138) @ #104

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>142 := @isObject(<>newObj<>141)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>142)
    [1] <>Global<>ignore40 := <>newObj<>141

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>142)
    [1] <>Global<>ignore40 := <>obj<>140

  Block[7] -> [9], [8], ExitExc
    [0] <>mountedComp<>127 := <>Global<>ignore40
    [1] <>obj<>143 := @ToObject(<>comp<>125) @ #105

  Block[8] -> [10], ExitExc
    [0] assert(typeof <>obj<>143["type"] === "function")
    [1] <>obj<>144 := @ToObject(<>comp<>125) @ #106
    [2] <>obj<>145 := @ToObject(<>obj<>144["type"]) @ #107
    [3] <>obj<>146 := @ToObject(<>obj<>145["prototype"]) @ #108
    [4] <>Global<>ignore41 := <>obj<>146["__class__"]

  Block[9] -> [12], [11], ExitExc
    [0] assert(typeof <>obj<>143["type"] !== "function")

  Block[10] -> [15], [14], ExitExc
    [0] <>isClassComponent<>128 := <>Global<>ignore41
    [1] <>obj<>147 := @ToObject(this) @ #109
    [2] <>obj<>148 := @ToObject(<>obj<>147["stateMap"]) @ #110
    [3] <>Global<>ignore42 := alloc() @ #111
    [4] <>obj<>148[<>loc<>126] := <>Global<>ignore42
    [5] <>obj<>149 := @ToObject(this) @ #112
    [6] <>obj<>150 := @ToObject(<>obj<>149["heap"]) @ #113
    [7] <>obj<>151 := @ToObject(<>comp<>125) @ #114
    [8] <>Global<>ignore43 := alloc() @ #115
    [9] <>Global<>ignore43["props"] := <>obj<>151["props"]
    [10] <>obj<>150[<>loc<>126] := <>Global<>ignore43

  Block[11] -> [13], ExitExc
    [0] assert(typeof typeof <>obj<>143["type"] === "function" == "boolean")
    [1] <>Global<>ignore41 := false

  Block[12] -> [13], ExitExc
    [0] assert(typeof typeof <>obj<>143["type"] === "function" != "boolean")
    [1] <>Global<>ignore41 := typeof <>obj<>143["type"] === "function"

  Block[13] -> [10]

  Block[14] -> [16], ExitExc
    [0] assert(<>isClassComponent<>128)
    [1] <>obj<>152 := @ToObject(<>comp<>125) @ #116
    [2] <>obj<>153 := @ToObject(<>obj<>152["props"]) @ #117
    [3] <>instance<>129 := <>obj<>153["$$instance"]
    [4] <>obj<>154 := @ToObject(<>instance<>129) @ #118
    [5] <>obj<>155 := @ToObject(this) @ #119
    [6] <>obj<>156 := @ToObject(<>obj<>155["setState"]) @ #120
    [7] <>temp<>157 := this
    [8] <>temp<>158 := <>loc<>126
    [9] <>arguments<>159 := allocArg(2) @ #121
    [10] <>arguments<>159["0"] := <>temp<>157
    [11] <>arguments<>159["1"] := <>temp<>158
    [12] <>fun<>160 := @ToObject(<>obj<>156["bind"]) @ #122
    [13] <>this<> := enterCode(<>obj<>156)

  Block[15] -> [20], ExitExc
    [0] assert(! <>isClassComponent<>128)

  Call[16] -> ExitExc
    [0] call(<>fun<>160, <>this<>, <>arguments<>159) @ #123

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [20], ExitExc
    [0] <>obj<>154["setState"] := <>Global<>ignore45
    [1] <>obj<>161 := @ToObject(<>instance<>129) @ #124
    [2] <>obj<>162 := @ToObject(<>comp<>125) @ #125
    [3] <>obj<>161["props"] := <>obj<>162["props"]

  Block[20] -> [21], ExitExc
    [0] <>obj<>163 := @ToObject(this) @ #126
    [1] <>temp<>164 := <>mountedComp<>127
    [2] <>obj<>165 := @ToObject(this) @ #127
    [3] <>obj<>166 := @ToObject(this) @ #128
    [4] <>temp<>167 := <>comp<>125
    [5] <>arguments<>168 := allocArg(1) @ #129
    [6] <>arguments<>168["0"] := <>temp<>167
    [7] <>fun<>169 := @ToObject(<>obj<>166["render"]) @ #130
    [8] <>this<> := enterCode(<>obj<>166)

  Call[21] -> ExitExc
    [0] call(<>fun<>169, <>this<>, <>arguments<>168) @ #131

  AfterCall[22] -> [24]

  AfterCatch[23] -> ExitExc

  Block[24] -> [25], ExitExc
    [0] <>arguments<>171 := allocArg(1) @ #132
    [1] <>arguments<>171["0"] := <>temp<>170
    [2] <>fun<>172 := @ToObject(<>obj<>165["mountSeq"]) @ #133
    [3] <>this<> := enterCode(<>obj<>165)

  Call[25] -> ExitExc
    [0] call(<>fun<>172, <>this<>, <>arguments<>171) @ #134

  AfterCall[26] -> [28]

  AfterCatch[27] -> ExitExc

  Block[28] -> [29], ExitExc
    [0] <>arguments<>174 := allocArg(2) @ #135
    [1] <>arguments<>174["0"] := <>temp<>164
    [2] <>arguments<>174["1"] := <>temp<>173
    [3] <>fun<>175 := @ToObject(<>obj<>163["mounted"]) @ #136
    [4] <>this<> := enterCode(<>obj<>163)

  Call[29] -> ExitExc
    [0] call(<>fun<>175, <>this<>, <>arguments<>174) @ #137

  AfterCall[30] -> [32]

  AfterCatch[31] -> ExitExc

  Block[32] -> [34], [33], ExitExc
    [0] <>result<>130 := <>Global<>ignore47

  Block[33] -> [35], ExitExc
    [0] assert(<>isClassComponent<>128)
    [1] <>obj<>176 := @ToObject(<>comp<>125) @ #138
    [2] <>obj<>177 := @ToObject(<>obj<>176["props"]) @ #139
    [3] <>obj<>178 := @ToObject(<>obj<>177["$$instance"]) @ #140
    [4] <>arguments<>179 := allocArg(0) @ #141
    [5] <>fun<>180 := @ToObject(<>obj<>178["componentDidMount"]) @ #142
    [6] <>this<> := enterCode(<>obj<>178)

  Block[34] -> [38], ExitExc
    [0] assert(! <>isClassComponent<>128)

  Call[35] -> ExitExc
    [0] call(<>fun<>180, <>this<>, <>arguments<>179) @ #143

  AfterCall[36] -> [38]

  AfterCatch[37] -> ExitExc

  Block[38] -> Exit, ExitExc
    [0] return(<>result<>130)

  Exit[-2]

  ExitExc[-3]

}

function[12] mountSeq {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>188 := @ToObject(<>comps<>184) @ #148

  Block[1] -> Exit, ExitExc
    [0] assert(<>obj<>188["length"] === 0)
    [1] <>new1<>189 := allocArray(0) @ #149
    [2] return(<>new1<>189)

  Block[2] -> [3], ExitExc
    [0] assert(<>obj<>188["length"] !== 0)

  Block[3] -> [4], ExitExc
    [0] <>obj<>190 := @ToObject(this) @ #150
    [1] <>obj<>191 := @ToObject(<>comps<>184) @ #151
    [2] <>arguments<>192 := allocArg(0) @ #152
    [3] <>fun<>193 := @ToObject(<>obj<>191["shift"]) @ #153
    [4] <>this<> := enterCode(<>obj<>191)

  Call[4] -> ExitExc
    [0] call(<>fun<>193, <>this<>, <>arguments<>192) @ #154

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> [8], ExitExc
    [0] <>arguments<>195 := allocArg(1) @ #155
    [1] <>arguments<>195["0"] := <>temp<>194
    [2] <>fun<>196 := @ToObject(<>obj<>190["mount"]) @ #156
    [3] <>this<> := enterCode(<>obj<>190)

  Call[8] -> ExitExc
    [0] call(<>fun<>196, <>this<>, <>arguments<>195) @ #157

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [12], ExitExc
    [0] <>head<>185 := <>Global<>ignore50
    [1] <>obj<>197 := @ToObject(this) @ #158
    [2] <>temp<>198 := <>comps<>184
    [3] <>arguments<>199 := allocArg(1) @ #159
    [4] <>arguments<>199["0"] := <>temp<>198
    [5] <>fun<>200 := @ToObject(<>obj<>197["mountSeq"]) @ #160
    [6] <>this<> := enterCode(<>obj<>197)

  Call[12] -> ExitExc
    [0] call(<>fun<>200, <>this<>, <>arguments<>199) @ #161

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> [16], ExitExc
    [0] <>tail<>186 := <>Global<>ignore51
    [1] <>obj<>201 := @ToObject(<>tail<>186) @ #162
    [2] <>temp<>202 := <>head<>185
    [3] <>arguments<>203 := allocArg(1) @ #163
    [4] <>arguments<>203["0"] := <>temp<>202
    [5] <>fun<>204 := @ToObject(<>obj<>201["unshift"]) @ #164
    [6] <>this<> := enterCode(<>obj<>201)

  Call[16] -> ExitExc
    [0] call(<>fun<>204, <>this<>, <>arguments<>203) @ #165

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] return(<>tail<>186)

  Exit[-2]

  ExitExc[-3]

}

function[13] mounted {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>211 := @ToObject(this) @ #170
    [1] <>obj<>212 := @ToObject(<>obj<>211["shapeMap"]) @ #171
    [2] <>obj<>213 := @ToObject(<>mountedComp<>208) @ #172
    [3] <>Global<>ignore54 := alloc() @ #173
    [4] <>Global<>ignore54["mountedComp"] := <>mountedComp<>208
    [5] <>Global<>ignore54["childLocs"] := <>childLocs<>209
    [6] <>obj<>212[<>obj<>213["loc"]] := <>Global<>ignore54
    [7] <>obj<>214 := @ToObject(<>mountedComp<>208) @ #174
    [8] return(<>obj<>214["loc"])

  Exit[-2]

  ExitExc[-3]

}

function[14] unmount {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>221 := @ToObject(this) @ #179
    [1] <>obj<>222 := @ToObject(<>obj<>221["shapeMap"]) @ #180
    [2] <>mountedComp<>219 := <>obj<>222[<>loc<>218]

  Block[1] -> Exit, ExitExc
    [0] assert(<>mountedComp<>219 === undefined)
    [1] return(null)

  Block[2] -> [4], ExitExc
    [0] assert(<>mountedComp<>219 !== undefined)
    [1] <>obj<>223 := @ToObject(this) @ #181
    [2] <>obj<>224 := @ToObject(<>obj<>223["shapeMap"]) @ #182
    [3] <>Global<>ignore57 := delete(<>obj<>224, <>loc<>218)
    [4] <>obj<>225 := @ToObject(this) @ #183
    [5] <>obj<>226 := @ToObject(<>mountedComp<>219) @ #184
    [6] <>temp<>227 := <>obj<>226["childLocs"]
    [7] <>arguments<>228 := allocArg(1) @ #185
    [8] <>arguments<>228["0"] := <>temp<>227
    [9] <>fun<>229 := @ToObject(<>obj<>225["unmountSeq"]) @ #186
    [10] <>this<> := enterCode(<>obj<>225)

  Block[3] -> Exit

  Call[4] -> ExitExc
    [0] call(<>fun<>229, <>this<>, <>arguments<>228) @ #187

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> [8], ExitExc
    [0] <>obj<>230 := @ToObject(this) @ #188
    [1] <>temp<>231 := <>loc<>218
    [2] <>arguments<>232 := allocArg(1) @ #189
    [3] <>arguments<>232["0"] := <>temp<>231
    [4] <>fun<>233 := @ToObject(<>obj<>230["unmounted"]) @ #190
    [5] <>this<> := enterCode(<>obj<>230)

  Call[8] -> ExitExc
    [0] call(<>fun<>233, <>this<>, <>arguments<>232) @ #191

  AfterCall[9] -> [3]

  AfterCatch[10] -> ExitExc

  Exit[-2]

  ExitExc[-3]

}

function[15] unmountSeq {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>240 := @ToObject(<>locs<>237) @ #196

  Block[1] -> [3], ExitExc
    [0] assert(<>obj<>240["length"] > 0)
    [1] <>obj<>241 := @ToObject(<>locs<>237) @ #197
    [2] <>arguments<>242 := allocArg(0) @ #198
    [3] <>fun<>243 := @ToObject(<>obj<>241["shift"]) @ #199
    [4] <>this<> := enterCode(<>obj<>241)

  Block[2] -> [14], ExitExc
    [0] assert(! <>obj<>240["length"] > 0)

  Call[3] -> ExitExc
    [0] call(<>fun<>243, <>this<>, <>arguments<>242) @ #200

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [7], ExitExc
    [0] <>loc<>238 := <>Global<>ignore61
    [1] <>obj<>244 := @ToObject(this) @ #201
    [2] <>temp<>245 := <>loc<>238
    [3] <>arguments<>246 := allocArg(1) @ #202
    [4] <>arguments<>246["0"] := <>temp<>245
    [5] <>fun<>247 := @ToObject(<>obj<>244["unmount"]) @ #203
    [6] <>this<> := enterCode(<>obj<>244)

  Call[7] -> ExitExc
    [0] call(<>fun<>247, <>this<>, <>arguments<>246) @ #204

  AfterCall[8] -> [10]

  AfterCatch[9] -> ExitExc

  Block[10] -> [11], ExitExc
    [0] <>obj<>248 := @ToObject(this) @ #205
    [1] <>temp<>249 := <>locs<>237
    [2] <>arguments<>250 := allocArg(1) @ #206
    [3] <>arguments<>250["0"] := <>temp<>249
    [4] <>fun<>251 := @ToObject(<>obj<>248["unmountSeq"]) @ #207
    [5] <>this<> := enterCode(<>obj<>248)

  Call[11] -> ExitExc
    [0] call(<>fun<>251, <>this<>, <>arguments<>250) @ #208

  AfterCall[12] -> [14]

  AfterCatch[13] -> ExitExc

  Block[14] -> Exit, ExitExc
    [0] <>new1<>252 := allocArray(0) @ #209
    [1] return(<>new1<>252)

  Exit[-2]

  ExitExc[-3]

}

function[16] unmounted {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[17] ReactState.prototype.render<>funexpr@89:31-103:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>265 := @ToObject(<>comp<>261) @ #218
    [1] <>obj<>266 := @ToObject(<>obj<>265["props"]) @ #219

  Block[1] -> [3], ExitExc
    [0] assert(<>obj<>266["$$instance"] !== undefined)
    [1] <>obj<>267 := @ToObject(<>comp<>261) @ #220
    [2] <>obj<>268 := @ToObject(<>obj<>267["props"]) @ #221
    [3] <>obj<>269 := @ToObject(<>obj<>268["$$instance"]) @ #222
    [4] <>obj<>270 := @ToObject(<>comp<>261) @ #223
    [5] <>obj<>269["props"] := <>obj<>270["props"]

  Block[2] -> [3], ExitExc
    [0] assert(<>obj<>266["$$instance"] === undefined)

  Block[3] -> [5], [4], ExitExc
    [0] <>obj<>271 := @ToObject(<>comp<>261) @ #224
    [1] <>obj<>272 := @ToObject(<>obj<>271["props"]) @ #225

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>272["render"] !== undefined)
    [1] <>obj<>273 := @ToObject(<>comp<>261) @ #226
    [2] <>obj<>274 := @ToObject(<>obj<>273["props"]) @ #227
    [3] <>obj<>275 := @ToObject(<>comp<>261) @ #228
    [4] <>temp<>276 := <>obj<>275["props"]
    [5] <>arguments<>277 := allocArg(1) @ #229
    [6] <>arguments<>277["0"] := <>temp<>276
    [7] <>fun<>278 := @ToObject(<>obj<>274["render"]) @ #230
    [8] <>this<> := enterCode(<>obj<>274)

  Block[5] -> [15], ExitExc
    [0] assert(<>obj<>272["render"] === undefined)
    [1] <>obj<>284 := @ToObject(<>comp<>261) @ #237
    [2] <>obj<>285 := @ToObject(<>obj<>284["children"]) @ #238
    [3] <>temp<>286 := 0
    [4] <>arguments<>287 := allocArg(1) @ #239
    [5] <>arguments<>287["0"] := <>temp<>286
    [6] <>fun<>288 := @ToObject(<>obj<>285["slice"]) @ #240
    [7] <>this<> := enterCode(<>obj<>285)

  Call[6] -> ExitExc
    [0] call(<>fun<>278, <>this<>, <>arguments<>277) @ #231

  AfterCall[7] -> [9]

  AfterCatch[8] -> ExitExc

  Block[9] -> [10], ExitExc
    [0] <>elt<>262 := <>Global<>ignore67
    [1] <>obj<>279 := @ToObject(this) @ #232
    [2] <>temp<>280 := <>elt<>262
    [3] <>arguments<>281 := allocArg(1) @ #233
    [4] <>arguments<>281["0"] := <>temp<>280
    [5] <>fun<>282 := @ToObject(<>obj<>279["extractCompDesc"]) @ #234
    [6] <>this<> := enterCode(<>obj<>279)

  Call[10] -> ExitExc
    [0] call(<>fun<>282, <>this<>, <>arguments<>281) @ #235

  AfterCall[11] -> [13]

  AfterCatch[12] -> ExitExc

  Block[13] -> Exit, ExitExc
    [0] <>desc<>263 := <>Global<>ignore68
    [1] <>obj<>283 := @ToObject(<>desc<>263) @ #236
    [2] return(<>obj<>283["children"])

  Block[14] -> Exit

  Call[15] -> ExitExc
    [0] call(<>fun<>288, <>this<>, <>arguments<>287) @ #241

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> Exit, ExitExc
    [0] return(<>new1<>289)

  Exit[-2]

  ExitExc[-3]

}

function[18] ReactState.prototype.rerender<>funexpr@105:33-114:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>298 := @ToObject(this) @ #246
    [1] <>obj<>299 := @ToObject(<>obj<>298["heap"]) @ #247
    [2] <>obj<>300 := @ToObject(<>obj<>299[<>loc<>293]) @ #248
    [3] <>props<>295 := <>obj<>300["props"]
    [4] <>obj<>301 := @ToObject(this) @ #249
    [5] <>obj<>302 := @ToObject(<>obj<>301["shapeMap"]) @ #250
    [6] <>obj<>303 := @ToObject(<>obj<>302[<>loc<>293]) @ #251
    [7] <>obj<>304 := @ToObject(<>obj<>303["mountedComp"]) @ #252
    [8] <>comp<>296 := <>obj<>304["comp"]
    [9] <>obj<>305 := @ToObject(<>props<>295) @ #253

  Block[1] -> [3], ExitExc
    [0] assert(<>obj<>305["render"] !== undefined)
    [1] <>obj<>306 := @ToObject(this) @ #254
    [2] <>obj<>307 := @ToObject(<>comp<>296) @ #255
    [3] <>obj<>308 := @ToObject(<>obj<>307["props"]) @ #256
    [4] <>temp<>309 := <>props<>295
    [5] <>arguments<>310 := allocArg(1) @ #257
    [6] <>arguments<>310["0"] := <>temp<>309
    [7] <>fun<>311 := @ToObject(<>obj<>308["render"]) @ #258
    [8] <>this<> := enterCode(<>obj<>308)

  Block[2] -> Exit, ExitExc
    [0] assert(<>obj<>305["render"] === undefined)
    [1] return(<>defaultComp<>294)

  Call[3] -> ExitExc
    [0] call(<>fun<>311, <>this<>, <>arguments<>310) @ #259

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [7], ExitExc
    [0] <>arguments<>313 := allocArg(1) @ #260
    [1] <>arguments<>313["0"] := <>temp<>312
    [2] <>fun<>314 := @ToObject(<>obj<>306["extractCompDesc"]) @ #261
    [3] <>this<> := enterCode(<>obj<>306)

  Call[7] -> ExitExc
    [0] call(<>fun<>314, <>this<>, <>arguments<>313) @ #262

  AfterCall[8] -> [10]

  AfterCatch[9] -> ExitExc

  Block[10] -> Exit, ExitExc
    [0] return(<>new1<>315)

  Block[11] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[19] ReactState.prototype.reconcileSeq<>funexpr@116:37-127:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>326 := @ToObject(<>comps<>319) @ #267

  Block[1] -> [3], ExitExc
    [0] assert(<>obj<>326["length"] === 0)
    [1] <>obj<>327 := @ToObject(<>locs<>320) @ #268
    [2] <>new<>328 := <>obj<>327["length"] === 0

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>obj<>326["length"] !== 0)

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof <>obj<>326["length"] === 0 == "boolean")
    [1] <>new<>328 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof <>obj<>326["length"] === 0 != "boolean")
    [1] <>new<>328 := <>obj<>326["length"] === 0

  Block[6] -> [3]

  Block[7] -> Exit, ExitExc
    [0] assert(<>new<>328)
    [1] <>new1<>329 := allocArray(0) @ #269
    [2] return(<>new1<>329)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new<>328)

  Block[9] -> [11], [10], ExitExc
    [0] <>obj<>330 := @ToObject(<>comps<>319) @ #270

  Block[10] -> [12], ExitExc
    [0] assert(<>obj<>330["length"] === 0)
    [1] <>obj<>331 := @ToObject(this) @ #271
    [2] <>temp<>332 := <>locs<>320
    [3] <>arguments<>333 := allocArg(1) @ #272
    [4] <>arguments<>333["0"] := <>temp<>332
    [5] <>fun<>334 := @ToObject(<>obj<>331["unmountSeq"]) @ #273
    [6] <>this<> := enterCode(<>obj<>331)

  Block[11] -> [16], ExitExc
    [0] assert(<>obj<>330["length"] !== 0)

  Call[12] -> ExitExc
    [0] call(<>fun<>334, <>this<>, <>arguments<>333) @ #274

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> Exit, ExitExc
    [0] return(<>new1<>335)

  Block[16] -> [18], [17], ExitExc
    [0] <>obj<>336 := @ToObject(<>locs<>320) @ #275

  Block[17] -> [19], ExitExc
    [0] assert(<>obj<>336["length"] === 0)
    [1] <>obj<>337 := @ToObject(this) @ #276
    [2] <>temp<>338 := <>comps<>319
    [3] <>arguments<>339 := allocArg(1) @ #277
    [4] <>arguments<>339["0"] := <>temp<>338
    [5] <>fun<>340 := @ToObject(<>obj<>337["mountSeq"]) @ #278
    [6] <>this<> := enterCode(<>obj<>337)

  Block[18] -> [23], ExitExc
    [0] assert(<>obj<>336["length"] !== 0)

  Call[19] -> ExitExc
    [0] call(<>fun<>340, <>this<>, <>arguments<>339) @ #279

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> Exit, ExitExc
    [0] return(<>new1<>341)

  Block[23] -> [24], ExitExc
    [0] <>obj<>342 := @ToObject(<>comps<>319) @ #280
    [1] <>comp<>321 := <>obj<>342[0]
    [2] <>obj<>343 := @ToObject(<>locs<>320) @ #281
    [3] <>loc<>322 := <>obj<>343[0]
    [4] <>obj<>344 := @ToObject(this) @ #282
    [5] <>temp<>345 := <>comp<>321
    [6] <>temp<>346 := <>loc<>322
    [7] <>arguments<>347 := allocArg(2) @ #283
    [8] <>arguments<>347["0"] := <>temp<>345
    [9] <>arguments<>347["1"] := <>temp<>346
    [10] <>fun<>348 := @ToObject(<>obj<>344["reconcile"]) @ #284
    [11] <>this<> := enterCode(<>obj<>344)

  Call[24] -> ExitExc
    [0] call(<>fun<>348, <>this<>, <>arguments<>347) @ #285

  AfterCall[25] -> [27]

  AfterCatch[26] -> ExitExc

  Block[27] -> [28], ExitExc
    [0] <>mountLoc<>323 := <>Global<>ignore75
    [1] <>obj<>349 := @ToObject(this) @ #286
    [2] <>obj<>350 := @ToObject(<>comps<>319) @ #287
    [3] <>temp<>351 := 1
    [4] <>arguments<>352 := allocArg(1) @ #288
    [5] <>arguments<>352["0"] := <>temp<>351
    [6] <>fun<>353 := @ToObject(<>obj<>350["slice"]) @ #289
    [7] <>this<> := enterCode(<>obj<>350)

  Call[28] -> ExitExc
    [0] call(<>fun<>353, <>this<>, <>arguments<>352) @ #290

  AfterCall[29] -> [31]

  AfterCatch[30] -> ExitExc

  Block[31] -> [32], ExitExc
    [0] <>obj<>355 := @ToObject(<>locs<>320) @ #291
    [1] <>temp<>356 := 1
    [2] <>arguments<>357 := allocArg(1) @ #292
    [3] <>arguments<>357["0"] := <>temp<>356
    [4] <>fun<>358 := @ToObject(<>obj<>355["slice"]) @ #293
    [5] <>this<> := enterCode(<>obj<>355)

  Call[32] -> ExitExc
    [0] call(<>fun<>358, <>this<>, <>arguments<>357) @ #294

  AfterCall[33] -> [35]

  AfterCatch[34] -> ExitExc

  Block[35] -> [36], ExitExc
    [0] <>arguments<>360 := allocArg(2) @ #295
    [1] <>arguments<>360["0"] := <>temp<>354
    [2] <>arguments<>360["1"] := <>temp<>359
    [3] <>fun<>361 := @ToObject(<>obj<>349["reconcileSeq"]) @ #296
    [4] <>this<> := enterCode(<>obj<>349)

  Call[36] -> ExitExc
    [0] call(<>fun<>361, <>this<>, <>arguments<>360) @ #297

  AfterCall[37] -> [39]

  AfterCatch[38] -> ExitExc

  Block[39] -> [40], ExitExc
    [0] <>tailMountLocs<>324 := <>Global<>ignore76
    [1] <>temp<>362 := <>mountLoc<>323
    [2] <>obj1<>363 := allocArray(1) @ #298
    [3] <>obj1<>363["0"] := <>temp<>362
    [4] <>obj<>364 := @ToObject(<>obj1<>363) @ #299
    [5] <>temp<>365 := <>tailMountLocs<>324
    [6] <>arguments<>366 := allocArg(1) @ #300
    [7] <>arguments<>366["0"] := <>temp<>365
    [8] <>fun<>367 := @ToObject(<>obj<>364["concat"]) @ #301
    [9] <>this<> := enterCode(<>obj<>364)

  Call[40] -> ExitExc
    [0] call(<>fun<>367, <>this<>, <>arguments<>366) @ #302

  AfterCall[41] -> [43]

  AfterCatch[42] -> ExitExc

  Block[43] -> Exit, ExitExc
    [0] return(<>new1<>368)

  Exit[-2]

  ExitExc[-3]

}

function[20] ReactState.prototype.reconcile<>funexpr@129:34-148:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>382 := @ToObject(this) @ #307
    [1] <>obj<>383 := @ToObject(<>obj<>382["shapeMap"]) @ #308
    [2] <>shape<>374 := <>obj<>383[<>loc<>373]
    [3] <>obj<>384 := @ToObject(<>shape<>374) @ #309
    [4] <>obj<>385 := @ToObject(<>obj<>384["mountedComp"]) @ #310
    [5] <>mountedComp<>375 := <>obj<>385["comp"]
    [6] <>obj<>386 := @ToObject(<>comp<>372) @ #311
    [7] <>y<>387 := <>obj<>386["type"]
    [8] <>obj<>388 := @ToObject(<>mountedComp<>375) @ #312

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>387 !== <>obj<>388["type"])
    [1] <>obj<>389 := @ToObject(this) @ #313
    [2] <>temp<>390 := <>loc<>373
    [3] <>arguments<>391 := allocArg(1) @ #314
    [4] <>arguments<>391["0"] := <>temp<>390
    [5] <>fun<>392 := @ToObject(<>obj<>389["unmount"]) @ #315
    [6] <>this<> := enterCode(<>obj<>389)

  Block[2] -> [12], ExitExc
    [0] assert(<>y<>387 === <>obj<>388["type"])
    [1] <>obj<>398 := @ToObject(<>comp<>372) @ #321
    [2] <>nextProps<>376 := <>obj<>398["props"]
    [3] <>obj<>399 := @ToObject(this) @ #322
    [4] <>obj<>400 := @ToObject(<>obj<>399["heap"]) @ #323
    [5] <>obj<>401 := @ToObject(<>obj<>400[<>loc<>373]) @ #324
    [6] <>obj<>401["props"] := <>nextProps<>376
    [7] <>obj<>402 := @ToObject(this) @ #325
    [8] <>temp<>403 := <>loc<>373
    [9] <>temp<>404 := <>comp<>372
    [10] <>arguments<>405 := allocArg(2) @ #326
    [11] <>arguments<>405["0"] := <>temp<>403
    [12] <>arguments<>405["1"] := <>temp<>404
    [13] <>fun<>406 := @ToObject(<>obj<>402["rerender"]) @ #327
    [14] <>this<> := enterCode(<>obj<>402)

  Call[3] -> ExitExc
    [0] call(<>fun<>392, <>this<>, <>arguments<>391) @ #316

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [7], ExitExc
    [0] <>obj<>393 := @ToObject(this) @ #317
    [1] <>temp<>394 := <>comp<>372
    [2] <>arguments<>395 := allocArg(1) @ #318
    [3] <>arguments<>395["0"] := <>temp<>394
    [4] <>fun<>396 := @ToObject(<>obj<>393["mount"]) @ #319
    [5] <>this<> := enterCode(<>obj<>393)

  Call[7] -> ExitExc
    [0] call(<>fun<>396, <>this<>, <>arguments<>395) @ #320

  AfterCall[8] -> [10]

  AfterCatch[9] -> ExitExc

  Block[10] -> Exit, ExitExc
    [0] return(<>new1<>397)

  Block[11] -> Exit

  Call[12] -> ExitExc
    [0] call(<>fun<>406, <>this<>, <>arguments<>405) @ #328

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> [16], ExitExc
    [0] <>nextComp<>377 := <>Global<>ignore83
    [1] <>obj<>407 := @ToObject(<>nextComp<>377) @ #329
    [2] <>nextChildComps<>378 := <>obj<>407["children"]
    [3] <>obj<>408 := @ToObject(this) @ #330
    [4] <>temp<>409 := <>nextChildComps<>378
    [5] <>obj<>410 := @ToObject(<>shape<>374) @ #331
    [6] <>temp<>411 := <>obj<>410["childLocs"]
    [7] <>arguments<>412 := allocArg(2) @ #332
    [8] <>arguments<>412["0"] := <>temp<>409
    [9] <>arguments<>412["1"] := <>temp<>411
    [10] <>fun<>413 := @ToObject(<>obj<>408["reconcileSeq"]) @ #333
    [11] <>this<> := enterCode(<>obj<>408)

  Call[16] -> ExitExc
    [0] call(<>fun<>413, <>this<>, <>arguments<>412) @ #334

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [20], ExitExc
    [0] <>nextChildLocs<>379 := <>Global<>ignore85
    [1] <>fun<>414 := @ToObject(<>MountedCompDesc<>88) @ #335
    [2] <>temp<>415 := <>comp<>372
    [3] <>temp<>416 := <>loc<>373
    [4] <>arguments<>417 := allocArg(2) @ #336
    [5] <>arguments<>417["0"] := <>temp<>415
    [6] <>arguments<>417["1"] := <>temp<>416
    [7] <>proto<>418 := <>fun<>414["prototype"]
    [8] <>obj<>419 := alloc(<>proto<>418) @ #337

  Call[20] -> ExitExc
    [0] construct(<>fun<>414, <>obj<>419, <>arguments<>417) @ #338

  AfterCall[21] -> [23]

  AfterCatch[22] -> ExitExc

  Block[23] -> [25], [24]
    [0] <>cond<>421 := @isObject(<>newObj<>420)

  Block[24] -> [26], ExitExc
    [0] assert(<>cond<>421)
    [1] <>Global<>ignore86 := <>newObj<>420

  Block[25] -> [26], ExitExc
    [0] assert(! <>cond<>421)
    [1] <>Global<>ignore86 := <>obj<>419

  Block[26] -> [27], ExitExc
    [0] <>nextMountedComp<>380 := <>Global<>ignore86
    [1] <>obj<>422 := @ToObject(this) @ #339
    [2] <>temp<>423 := <>nextMountedComp<>380
    [3] <>temp<>424 := <>nextChildLocs<>379
    [4] <>arguments<>425 := allocArg(2) @ #340
    [5] <>arguments<>425["0"] := <>temp<>423
    [6] <>arguments<>425["1"] := <>temp<>424
    [7] <>fun<>426 := @ToObject(<>obj<>422["reconciled"]) @ #341
    [8] <>this<> := enterCode(<>obj<>422)

  Call[27] -> ExitExc
    [0] call(<>fun<>426, <>this<>, <>arguments<>425) @ #342

  AfterCall[28] -> [30]

  AfterCatch[29] -> ExitExc

  Block[30] -> Exit, ExitExc
    [0] return(<>new1<>427)

  Exit[-2]

  ExitExc[-3]

}

function[21] ReactState.prototype.reconciled<>funexpr@150:35-159:2<> {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>435 := @ToObject(<>mountedComp<>431) @ #347
    [1] <>loc<>433 := <>obj<>435["loc"]
    [2] <>obj<>436 := @ToObject(this) @ #348
    [3] <>obj<>437 := @ToObject(<>obj<>436["shapeMap"]) @ #349
    [4] <>Global<>ignore89 := alloc() @ #350
    [5] <>Global<>ignore89["mountedComp"] := <>mountedComp<>431
    [6] <>Global<>ignore89["childLocs"] := <>childLocs<>432
    [7] <>obj<>437[<>loc<>433] := <>Global<>ignore89
    [8] return(<>loc<>433)

  Exit[-2]

  ExitExc[-3]

}

function[22] ReactState.prototype.setState<>funexpr@161:33-177:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>451 := @ToObject(this) @ #355
    [1] <>obj<>452 := @ToObject(<>obj<>451["stateMap"]) @ #356
    [2] <>nextState<>443 := <>obj<>452[<>loc<>441]
    [3] <>obj<>453 := @ToObject(this) @ #357
    [4] <>obj<>454 := @ToObject(<>obj<>453["shapeMap"]) @ #358
    [5] <>shape<>444 := <>obj<>454[<>loc<>441]
    [6] <>obj<>455 := @ToObject(<>shape<>444) @ #359
    [7] <>obj<>456 := @ToObject(<>obj<>455["mountedComp"]) @ #360
    [8] <>obj<>457 := @ToObject(<>obj<>456["comp"]) @ #361
    [9] <>obj<>458 := @ToObject(<>obj<>457["props"]) @ #362
    [10] <>instance<>445 := <>obj<>458["$$instance"]

  Block[1] -> [3], ExitExc
    [0] assert(<>instance<>445 !== undefined)
    [1] <>obj<>459 := @ToObject(<>instance<>445) @ #363
    [2] <>compState<>446 := <>obj<>459["state"]
    [3] <>obj<>460 := <>nextState<>443
    [4] <>iterator<>461 := @iteratorInit(<>obj<>460) @ #364
    [5] <>cond1<>462 := @iteratorHasNext(<>obj<>460, <>iterator<>461)

  Block[2] -> [13], ExitExc
    [0] assert(<>instance<>445 === undefined)

  LoopHead[3] -> [5], [4]

  Block[4] -> [6], ExitExc
    [0] assert(<>cond1<>462)
    [1] <>key<>463 := @iteratorNext(<>obj<>460, <>iterator<>461)
    [2] <>key<>447 := <>key<>463
    [3] <>obj<>464 := @ToObject(<>compState<>446) @ #365
    [4] <>obj<>465 := @ToObject(<>nextState<>443) @ #366
    [5] <>obj<>464[<>key<>447] := <>obj<>465[<>key<>447]

  Block[5] -> [7], ExitExc
    [0] assert(! <>cond1<>462)

  LCont[6] -> [3]
    [0] <>cond1<>462 := @iteratorHasNext(<>obj<>460, <>iterator<>461)

  LBreak[7] -> [8], ExitExc
    [0] <>obj<>466 := <>newState<>442
    [1] <>iterator<>467 := @iteratorInit(<>obj<>466) @ #367
    [2] <>cond1<>468 := @iteratorHasNext(<>obj<>466, <>iterator<>467)

  LoopHead[8] -> [10], [9]

  Block[9] -> [11], ExitExc
    [0] assert(<>cond1<>468)
    [1] <>key<>469 := @iteratorNext(<>obj<>466, <>iterator<>467)
    [2] <>key<>447 := <>key<>469
    [3] <>obj<>470 := @ToObject(<>compState<>446) @ #368
    [4] <>obj<>471 := @ToObject(<>newState<>442) @ #369
    [5] <>obj<>470[<>key<>447] := <>obj<>471[<>key<>447]

  Block[10] -> [12], ExitExc
    [0] assert(! <>cond1<>468)

  LCont[11] -> [8]
    [0] <>cond1<>468 := @iteratorHasNext(<>obj<>466, <>iterator<>467)

  LBreak[12] -> [13], ExitExc
    [0] <>obj<>472 := @ToObject(this) @ #370
    [1] <>obj<>473 := @ToObject(<>obj<>472["stateMap"]) @ #371
    [2] <>obj<>473[<>loc<>441] := <>compState<>446
    [3] <>obj<>474 := @ToObject(<>instance<>445) @ #372
    [4] <>obj<>474["state"] := <>compState<>446

  Block[13] -> [14], ExitExc
    [0] <>obj<>475 := @ToObject(this) @ #373
    [1] <>obj<>476 := @ToObject(<>shape<>444) @ #374
    [2] <>obj<>477 := @ToObject(<>obj<>476["mountedComp"]) @ #375
    [3] <>temp<>478 := <>obj<>477["comp"]
    [4] <>arguments<>479 := allocArg(1) @ #376
    [5] <>arguments<>479["0"] := <>temp<>478
    [6] <>fun<>480 := @ToObject(<>obj<>475["render"]) @ #377
    [7] <>this<> := enterCode(<>obj<>475)

  Call[14] -> ExitExc
    [0] call(<>fun<>480, <>this<>, <>arguments<>479) @ #378

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [18], ExitExc
    [0] <>nextChildComps<>448 := <>Global<>ignore99
    [1] <>obj<>481 := @ToObject(this) @ #379
    [2] <>temp<>482 := <>nextChildComps<>448
    [3] <>obj<>483 := @ToObject(<>shape<>444) @ #380
    [4] <>temp<>484 := <>obj<>483["childLocs"]
    [5] <>arguments<>485 := allocArg(2) @ #381
    [6] <>arguments<>485["0"] := <>temp<>482
    [7] <>arguments<>485["1"] := <>temp<>484
    [8] <>fun<>486 := @ToObject(<>obj<>481["reconcileSeq"]) @ #382
    [9] <>this<> := enterCode(<>obj<>481)

  Call[18] -> ExitExc
    [0] call(<>fun<>486, <>this<>, <>arguments<>485) @ #383

  AfterCall[19] -> [21]

  AfterCatch[20] -> ExitExc

  Block[21] -> [22], ExitExc
    [0] <>nextChildLocs<>449 := <>Global<>ignore100
    [1] <>obj<>487 := @ToObject(this) @ #384
    [2] <>obj<>488 := @ToObject(<>shape<>444) @ #385
    [3] <>temp<>489 := <>obj<>488["mountedComp"]
    [4] <>temp<>490 := <>nextChildLocs<>449
    [5] <>arguments<>491 := allocArg(2) @ #386
    [6] <>arguments<>491["0"] := <>temp<>489
    [7] <>arguments<>491["1"] := <>temp<>490
    [8] <>fun<>492 := @ToObject(<>obj<>487["reconciled"]) @ #387
    [9] <>this<> := enterCode(<>obj<>487)

  Call[22] -> ExitExc
    [0] call(<>fun<>492, <>this<>, <>arguments<>491) @ #388

  AfterCall[23] -> [25]

  AfterCatch[24] -> ExitExc

  Block[25] -> Exit, ExitExc
    [0] return(<>new1<>493)

  Exit[-2]

  ExitExc[-3]

}

function[23] ReactState.prototype.extractCompDesc<>funexpr@179:40-209:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>element<>497 === "undefined")
    [1] <>fun<>503 := @ToObject(<>CompDesc<>87) @ #393
    [2] <>temp<>504 := "plaintext"
    [3] <>temp<>505 := alloc() @ #394
    [4] <>temp<>505["text"] := ""
    [5] <>temp<>506 := allocArray(0) @ #395
    [6] <>arguments<>507 := allocArg(3) @ #396
    [7] <>arguments<>507["0"] := <>temp<>504
    [8] <>arguments<>507["1"] := <>temp<>505
    [9] <>arguments<>507["2"] := <>temp<>506
    [10] <>proto<>508 := <>fun<>503["prototype"]
    [11] <>obj<>509 := alloc(<>proto<>508) @ #397

  Block[2] -> [12], [11], ExitExc
    [0] assert(typeof <>element<>497 !== "undefined")

  Call[3] -> ExitExc
    [0] construct(<>fun<>503, <>obj<>509, <>arguments<>507) @ #398

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>511 := @isObject(<>newObj<>510)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>511)
    [1] <>new1<>512 := <>newObj<>510

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>511)
    [1] <>new1<>512 := <>obj<>509

  Block[9] -> Exit, ExitExc
    [0] return(<>new1<>512)

  Block[10] -> Exit

  Block[11] -> [13], ExitExc
    [0] assert(typeof <>element<>497 === "string")
    [1] <>fun<>513 := @ToObject(<>CompDesc<>87) @ #399
    [2] <>temp<>514 := "plaintext"
    [3] <>temp<>515 := alloc() @ #400
    [4] <>temp<>515["text"] := <>element<>497
    [5] <>temp<>516 := allocArray(0) @ #401
    [6] <>arguments<>517 := allocArg(3) @ #402
    [7] <>arguments<>517["0"] := <>temp<>514
    [8] <>arguments<>517["1"] := <>temp<>515
    [9] <>arguments<>517["2"] := <>temp<>516
    [10] <>proto<>518 := <>fun<>513["prototype"]
    [11] <>obj<>519 := alloc(<>proto<>518) @ #403

  Block[12] -> [22], [21], ExitExc
    [0] assert(typeof <>element<>497 !== "string")
    [1] <>obj<>523 := @ToObject(<>element<>497) @ #405

  Call[13] -> ExitExc
    [0] construct(<>fun<>513, <>obj<>519, <>arguments<>517) @ #404

  AfterCall[14] -> [16]

  AfterCatch[15] -> ExitExc

  Block[16] -> [18], [17]
    [0] <>cond<>521 := @isObject(<>newObj<>520)

  Block[17] -> [19], ExitExc
    [0] assert(<>cond<>521)
    [1] <>new1<>522 := <>newObj<>520

  Block[18] -> [19], ExitExc
    [0] assert(! <>cond<>521)
    [1] <>new1<>522 := <>obj<>519

  Block[19] -> Exit, ExitExc
    [0] return(<>new1<>522)

  Block[20] -> [10]

  Block[21] -> [23], ExitExc
    [0] assert(typeof <>obj<>523["type"] === "string")
    [1] <>Global<>ignore102 := allocArray(0) @ #406
    [2] <>children<>498 := <>Global<>ignore102
    [3] <>obj<>524 := @ToObject(<>element<>497) @ #407
    [4] <>obj<>525 := @ToObject(<>obj<>524["props"]) @ #408
    [5] <>childElts<>499 := <>obj<>525["children"]
    [6] <>i<>500 := 0
    [7] <>y<>526 := <>i<>500
    [8] <>obj<>527 := @ToObject(<>childElts<>499) @ #409

  Block[22] -> [41], [40], ExitExc
    [0] assert(typeof <>obj<>523["type"] !== "string")
    [1] <>obj<>548 := @ToObject(<>element<>497) @ #423
    [2] <>obj<>549 := @ToObject(<>obj<>548["type"]) @ #424
    [3] <>obj<>550 := @ToObject(<>obj<>549["prototype"]) @ #425

  LoopHead[23] -> [25], [24]

  Block[24] -> [26], ExitExc
    [0] assert(<>y<>526 < <>obj<>527["length"])
    [1] <>obj<>528 := @ToObject(<>children<>498) @ #410
    [2] <>obj<>529 := @ToObject(this) @ #411
    [3] <>obj<>530 := @ToObject(<>childElts<>499) @ #412
    [4] <>temp<>531 := <>obj<>530[<>i<>500]
    [5] <>arguments<>532 := allocArg(1) @ #413
    [6] <>arguments<>532["0"] := <>temp<>531
    [7] <>fun<>533 := @ToObject(<>obj<>529["extractCompDesc"]) @ #414
    [8] <>this<> := enterCode(<>obj<>529)

  Block[25] -> [31], ExitExc
    [0] assert(! <>y<>526 < <>obj<>527["length"])

  Call[26] -> ExitExc
    [0] call(<>fun<>533, <>this<>, <>arguments<>532) @ #415

  AfterCall[27] -> [29]

  AfterCatch[28] -> ExitExc

  Block[29] -> [30], ExitExc
    [0] <>obj<>528[<>i<>500] := <>Global<>ignore107

  LCont[30] -> [23], ExitExc
    [0] <>old<>534 := <>i<>500
    [1] <>new<>535 := @ToNumber(<>old<>534)
    [2] <>i<>500 := <>new<>535 + 1
    [3] <>Global<>ignore106 := <>new<>535
    [4] <>y<>526 := <>i<>500
    [5] <>obj<>527 := @ToObject(<>childElts<>499) @ #416

  LBreak[31] -> [32], ExitExc
    [0] <>fun<>536 := @ToObject(<>CompDesc<>87) @ #417
    [1] <>obj<>537 := @ToObject(<>element<>497) @ #418
    [2] <>temp<>538 := <>obj<>537["type"]
    [3] <>obj<>539 := @ToObject(<>element<>497) @ #419
    [4] <>temp<>540 := <>obj<>539["props"]
    [5] <>temp<>541 := <>children<>498
    [6] <>arguments<>542 := allocArg(3) @ #420
    [7] <>arguments<>542["0"] := <>temp<>538
    [8] <>arguments<>542["1"] := <>temp<>540
    [9] <>arguments<>542["2"] := <>temp<>541
    [10] <>proto<>543 := <>fun<>536["prototype"]
    [11] <>obj<>544 := alloc(<>proto<>543) @ #421

  Call[32] -> ExitExc
    [0] construct(<>fun<>536, <>obj<>544, <>arguments<>542) @ #422

  AfterCall[33] -> [35]

  AfterCatch[34] -> ExitExc

  Block[35] -> [37], [36]
    [0] <>cond<>546 := @isObject(<>newObj<>545)

  Block[36] -> [38], ExitExc
    [0] assert(<>cond<>546)
    [1] <>new1<>547 := <>newObj<>545

  Block[37] -> [38], ExitExc
    [0] assert(! <>cond<>546)
    [1] <>new1<>547 := <>obj<>544

  Block[38] -> Exit, ExitExc
    [0] return(<>new1<>547)

  Block[39] -> [20]

  Block[40] -> [42], ExitExc
    [0] assert(! <>obj<>550["__class__"])
    [1] <>obj<>551 := @ToObject(<>element<>497) @ #426
    [2] <>obj<>552 := @ToObject(<>obj<>551["props"]) @ #427
    [3] <>obj<>553 := @ToObject(<>element<>497) @ #428
    [4] <>obj<>552["render"] := <>obj<>553["type"]
    [5] <>fun<>554 := @ToObject(<>CompDesc<>87) @ #429
    [6] <>obj<>555 := @ToObject(<>element<>497) @ #430
    [7] <>temp<>556 := <>obj<>555["type"]
    [8] <>obj<>557 := @ToObject(<>element<>497) @ #431
    [9] <>temp<>558 := <>obj<>557["props"]
    [10] <>temp<>559 := allocArray(0) @ #432
    [11] <>arguments<>560 := allocArg(3) @ #433
    [12] <>arguments<>560["0"] := <>temp<>556
    [13] <>arguments<>560["1"] := <>temp<>558
    [14] <>arguments<>560["2"] := <>temp<>559
    [15] <>proto<>561 := <>fun<>554["prototype"]
    [16] <>obj<>562 := alloc(<>proto<>561) @ #434

  Block[41] -> [50], ExitExc
    [0] assert(! ! <>obj<>550["__class__"])
    [1] <>obj<>566 := @ToObject(<>element<>497) @ #436
    [2] <>fun<>567 := @ToObject(<>obj<>566["type"]) @ #437
    [3] <>arguments<>568 := allocArg(0) @ #438
    [4] <>proto<>569 := <>fun<>567["prototype"]
    [5] <>obj<>570 := alloc(<>proto<>569) @ #439

  Call[42] -> ExitExc
    [0] construct(<>fun<>554, <>obj<>562, <>arguments<>560) @ #435

  AfterCall[43] -> [45]

  AfterCatch[44] -> ExitExc

  Block[45] -> [47], [46]
    [0] <>cond<>564 := @isObject(<>newObj<>563)

  Block[46] -> [48], ExitExc
    [0] assert(<>cond<>564)
    [1] <>new1<>565 := <>newObj<>563

  Block[47] -> [48], ExitExc
    [0] assert(! <>cond<>564)
    [1] <>new1<>565 := <>obj<>562

  Block[48] -> Exit, ExitExc
    [0] return(<>new1<>565)

  Block[49] -> [39]

  Call[50] -> ExitExc
    [0] construct(<>fun<>567, <>obj<>570, <>arguments<>568) @ #440

  AfterCall[51] -> [53]

  AfterCatch[52] -> ExitExc

  Block[53] -> [55], [54]
    [0] <>cond<>572 := @isObject(<>newObj<>571)

  Block[54] -> [56], ExitExc
    [0] assert(<>cond<>572)
    [1] <>Global<>ignore109 := <>newObj<>571

  Block[55] -> [56], ExitExc
    [0] assert(! <>cond<>572)
    [1] <>Global<>ignore109 := <>obj<>570

  Block[56] -> [57], ExitExc
    [0] <>instance<>501 := <>Global<>ignore109
    [1] <>obj<>573 := @ToObject(<>element<>497) @ #441
    [2] <>obj<>574 := @ToObject(<>obj<>573["props"]) @ #442
    [3] <>obj<>574["$$instance"] := <>instance<>501
    [4] <>obj<>575 := @ToObject(<>element<>497) @ #443
    [5] <>obj<>576 := @ToObject(<>obj<>575["props"]) @ #444
    [6] <>obj<>577 := @ToObject(<>instance<>501) @ #445
    [7] <>obj<>578 := @ToObject(<>obj<>577["render"]) @ #446
    [8] <>temp<>579 := <>instance<>501
    [9] <>arguments<>580 := allocArg(1) @ #447
    [10] <>arguments<>580["0"] := <>temp<>579
    [11] <>fun<>581 := @ToObject(<>obj<>578["bind"]) @ #448
    [12] <>this<> := enterCode(<>obj<>578)

  Call[57] -> ExitExc
    [0] call(<>fun<>581, <>this<>, <>arguments<>580) @ #449

  AfterCall[58] -> [60]

  AfterCatch[59] -> ExitExc

  Block[60] -> [61], ExitExc
    [0] <>obj<>576["render"] := <>Global<>ignore111
    [1] <>fun<>582 := @ToObject(<>CompDesc<>87) @ #450
    [2] <>obj<>583 := @ToObject(<>element<>497) @ #451
    [3] <>temp<>584 := <>obj<>583["type"]
    [4] <>obj<>585 := @ToObject(<>element<>497) @ #452
    [5] <>temp<>586 := <>obj<>585["props"]
    [6] <>temp<>587 := allocArray(0) @ #453
    [7] <>arguments<>588 := allocArg(3) @ #454
    [8] <>arguments<>588["0"] := <>temp<>584
    [9] <>arguments<>588["1"] := <>temp<>586
    [10] <>arguments<>588["2"] := <>temp<>587
    [11] <>proto<>589 := <>fun<>582["prototype"]
    [12] <>obj<>590 := alloc(<>proto<>589) @ #455

  Call[61] -> ExitExc
    [0] construct(<>fun<>582, <>obj<>590, <>arguments<>588) @ #456

  AfterCall[62] -> [64]

  AfterCatch[63] -> ExitExc

  Block[64] -> [66], [65]
    [0] <>cond<>592 := @isObject(<>newObj<>591)

  Block[65] -> [67], ExitExc
    [0] assert(<>cond<>592)
    [1] <>new1<>593 := <>newObj<>591

  Block[66] -> [67], ExitExc
    [0] assert(! <>cond<>592)
    [1] <>new1<>593 := <>obj<>590

  Block[67] -> Exit, ExitExc
    [0] return(<>new1<>593)

  Exit[-2]

  ExitExc[-3]

}

function[24] ReactState.prototype.printState<>funexpr@211:35-222:2<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>result<>597 := "\n====== Shape Map ======\n\n"
    [1] <>i<>598 := 0
    [2] <>y<>601 := <>i<>598
    [3] <>obj<>602 := @ToObject(this) @ #461

  LoopHead[1] -> [3], [2]

  Block[2] -> [4], ExitExc
    [0] assert(<>y<>601 < <>obj<>602["nextLoc"])
    [1] <>obj<>603 := @ToObject(this) @ #462
    [2] <>obj<>604 := @ToObject(<>obj<>603["shapeMap"]) @ #463
    [3] <>shape<>599 := <>obj<>604[<>i<>598]
    [4] <>old<>605 := <>result<>597
    [5] <>y<>606 := <>i<>598 + ": "
    [6] <>obj<>607 := @ToObject(<>shape<>599) @ #464
    [7] <>obj<>608 := @ToObject(<>obj<>607["mountedComp"]) @ #465
    [8] <>obj<>609 := @ToObject(this) @ #466
    [9] <>temp<>610 := <>obj<>609["heap"]
    [10] <>obj<>611 := @ToObject(<>shape<>599) @ #467
    [11] <>temp<>612 := <>obj<>611["childLocs"]
    [12] <>arguments<>613 := allocArg(2) @ #468
    [13] <>arguments<>613["0"] := <>temp<>610
    [14] <>arguments<>613["1"] := <>temp<>612
    [15] <>fun<>614 := @ToObject(<>obj<>608["toString"]) @ #469
    [16] <>this<> := enterCode(<>obj<>608)

  Block[3] -> [9], ExitExc
    [0] assert(! <>y<>601 < <>obj<>602["nextLoc"])

  Call[4] -> ExitExc
    [0] call(<>fun<>614, <>this<>, <>arguments<>613) @ #470

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> [8], ExitExc
    [0] <>result<>597 := <>old<>605 + <>y<>606 + <>z<>615 + "\n"

  LCont[8] -> [1], ExitExc
    [0] <>old<>616 := <>i<>598
    [1] <>new<>617 := @ToNumber(<>old<>616)
    [2] <>i<>598 := <>new<>617 + 1
    [3] <>Global<>ignore116 := <>new<>617
    [4] <>y<>601 := <>i<>598
    [5] <>obj<>602 := @ToObject(this) @ #471

  LBreak[9] -> Exit, ExitExc
    [0] return(<>result<>597)

  Exit[-2]

  ExitExc[-3]

}

function[25] ReactState.prototype.printHtml<>funexpr@224:34-226:2<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>y<>623 := "\n"
    [1] <>obj<>624 := @ToObject(this) @ #476
    [2] <>temp<>625 := <>loc<>621
    [3] <>temp<>626 := ""
    [4] <>arguments<>627 := allocArg(2) @ #477
    [5] <>arguments<>627["0"] := <>temp<>625
    [6] <>arguments<>627["1"] := <>temp<>626
    [7] <>fun<>628 := @ToObject(<>obj<>624["printHtmlRec"]) @ #478
    [8] <>this<> := enterCode(<>obj<>624)

  Call[1] -> ExitExc
    [0] call(<>fun<>628, <>this<>, <>arguments<>627) @ #479

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>y<>623 + <>z<>629)

  Exit[-2]

  ExitExc[-3]

}

function[26] ReactState.prototype.printHtmlRec<>funexpr@228:37-264:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>645 := @ToObject(this) @ #484
    [1] <>obj<>646 := @ToObject(<>obj<>645["shapeMap"]) @ #485
    [2] <>shape<>635 := <>obj<>646[<>loc<>633]
    [3] <>obj<>647 := @ToObject(<>shape<>635) @ #486
    [4] <>obj<>648 := @ToObject(<>obj<>647["mountedComp"]) @ #487
    [5] <>comp<>636 := <>obj<>648["comp"]
    [6] <>obj<>649 := @ToObject(<>comp<>636) @ #488
    [7] <>props<>637 := <>obj<>649["props"]
    [8] <>result<>638 := ""
    [9] <>obj<>650 := @ToObject(<>props<>637) @ #489

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>obj<>650["render"] === "function")
    [1] <>obj<>651 := @ToObject(<>props<>637) @ #490
    [2] <>obj<>652 := @ToObject(<>obj<>651["$$instance"]) @ #491
    [3] <>obj<>652["props"] := <>props<>637
    [4] <>obj<>653 := @ToObject(<>props<>637) @ #492
    [5] <>temp<>654 := <>props<>637
    [6] <>arguments<>655 := allocArg(1) @ #493
    [7] <>arguments<>655["0"] := <>temp<>654
    [8] <>fun<>656 := @ToObject(<>obj<>653["render"]) @ #494
    [9] <>this<> := enterCode(<>obj<>653)

  Block[2] -> [7], ExitExc
    [0] assert(typeof <>obj<>650["render"] !== "function")
    [1] <>obj<>661 := @ToObject(<>shape<>635) @ #499
    [2] <>obj<>662 := @ToObject(<>obj<>661["mountedComp"]) @ #500
    [3] <>obj<>663 := @ToObject(<>obj<>662["comp"]) @ #501
    [4] <>tag<>639 := <>obj<>663["type"]

  Call[3] -> ExitExc
    [0] call(<>fun<>656, <>this<>, <>arguments<>655) @ #495

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [7], ExitExc
    [0] <>elt<>640 := <>Global<>ignore126
    [1] <>obj<>657 := @ToObject(<>elt<>640) @ #496
    [2] <>y<>658 := <>obj<>657["type"] + ":"
    [3] <>obj<>659 := @ToObject(<>comp<>636) @ #497
    [4] <>obj<>660 := @ToObject(<>obj<>659["type"]) @ #498
    [5] <>tag<>639 := <>y<>658 + <>obj<>660["name"]

  Block[7] -> [9], [8]

  Block[8] -> [10], ExitExc
    [0] assert(<>tag<>639 !== "plaintext")
    [1] <>old<>664 := <>result<>638
    [2] <>result<>638 := <>old<>664 + <>indent<>634 + "<" + <>tag<>639 + "@" + <>loc<>633
    [3] <>obj<>665 := <>props<>637
    [4] <>iterator<>666 := @iteratorInit(<>obj<>665) @ #502
    [5] <>cond1<>667 := @iteratorHasNext(<>obj<>665, <>iterator<>666)

  Block[9] -> [44], ExitExc
    [0] assert(<>tag<>639 === "plaintext")
    [1] <>old<>693 := <>result<>638
    [2] <>y<>694 := <>indent<>634
    [3] <>obj<>695 := @ToObject(<>shape<>635) @ #520
    [4] <>obj<>696 := @ToObject(<>obj<>695["mountedComp"]) @ #521
    [5] <>obj<>697 := @ToObject(<>obj<>696["comp"]) @ #522
    [6] <>obj<>698 := @ToObject(<>obj<>697["props"]) @ #523
    [7] <>result<>638 := <>old<>693 + <>y<>694 + <>obj<>698["text"] + "\n"

  LoopHead[10] -> [12], [11]

  Block[11] -> [14], [13], ExitExc
    [0] assert(<>cond1<>667)
    [1] <>key<>668 := @iteratorNext(<>obj<>665, <>iterator<>666)
    [2] <>key<>641 := <>key<>668

  Block[12] -> [34], ExitExc
    [0] assert(! <>cond1<>667)

  Block[13] -> [15], ExitExc
    [0] assert(<>key<>641 === "children")
    [1] <>new1<>669 := <>key<>641 === "children"

  Block[14] -> [15], ExitExc
    [0] assert(<>key<>641 !== "children")
    [1] <>new1<>669 := <>key<>641 === "render"

  Block[15] -> [17], [16]

  Block[16] -> [22], ExitExc
    [0] assert(<>new1<>669)

  Block[17] -> [18], ExitExc
    [0] assert(! <>new1<>669)

  Block[18] -> [20], [19]

  Block[19] -> [22], ExitExc
    [0] assert(<>key<>641 === "$$instance")

  Block[20] -> [21], ExitExc
    [0] assert(<>key<>641 !== "$$instance")

  Block[21] -> [23]

  Branch[22] -> [33]

  Branch[23] -> [25], [24], ExitExc
    [0] <>obj<>670 := @ToObject(<>props<>637) @ #503

  Block[24] -> [33], ExitExc
    [0] assert(<>obj<>670[<>key<>641] === undefined)

  Block[25] -> [26], ExitExc
    [0] assert(<>obj<>670[<>key<>641] !== undefined)

  Block[26] -> [28], [27], ExitExc
    [0] <>obj<>671 := @ToObject(<>props<>637) @ #504

  Block[27] -> [29], ExitExc
    [0] assert(typeof <>obj<>671[<>key<>641] === "function")
    [1] <>Global<>ignore130 := "[Function]"

  Block[28] -> [30], ExitExc
    [0] assert(typeof <>obj<>671[<>key<>641] !== "function")
    [1] <>obj<>672 := @ToObject(<>props<>637) @ #505
    [2] <>obj<>673 := @ToObject(<>obj<>672[<>key<>641]) @ #506
    [3] <>arguments<>674 := allocArg(0) @ #507
    [4] <>fun<>675 := @ToObject(<>obj<>673["toString"]) @ #508
    [5] <>this<> := enterCode(<>obj<>673)

  Block[29] -> [33], ExitExc
    [0] <>propStr<>642 := <>Global<>ignore130
    [1] <>old<>676 := <>result<>638
    [2] <>result<>638 := <>old<>676 + " " + <>key<>641 + "=" + "\"" + <>propStr<>642 + "\""

  Call[30] -> ExitExc
    [0] call(<>fun<>675, <>this<>, <>arguments<>674) @ #509

  AfterCall[31] -> [29]

  AfterCatch[32] -> ExitExc

  LCont[33] -> [10]
    [0] <>cond1<>667 := @iteratorHasNext(<>obj<>665, <>iterator<>666)

  LBreak[34] -> [35], ExitExc
    [0] <>old<>677 := <>result<>638
    [1] <>result<>638 := <>old<>677 + ">\n"
    [2] <>i<>643 := 0
    [3] <>y<>678 := <>i<>643
    [4] <>obj<>679 := @ToObject(<>shape<>635) @ #510
    [5] <>obj<>680 := @ToObject(<>obj<>679["childLocs"]) @ #511

  LoopHead[35] -> [37], [36]

  Block[36] -> [38], ExitExc
    [0] assert(<>y<>678 < <>obj<>680["length"])
    [1] <>old<>681 := <>result<>638
    [2] <>obj<>682 := @ToObject(this) @ #512
    [3] <>obj<>683 := @ToObject(<>shape<>635) @ #513
    [4] <>obj<>684 := @ToObject(<>obj<>683["childLocs"]) @ #514
    [5] <>temp<>685 := <>obj<>684[<>i<>643]
    [6] <>temp<>686 := <>indent<>634 + "  "
    [7] <>arguments<>687 := allocArg(2) @ #515
    [8] <>arguments<>687["0"] := <>temp<>685
    [9] <>arguments<>687["1"] := <>temp<>686
    [10] <>fun<>688 := @ToObject(<>obj<>682["printHtmlRec"]) @ #516
    [11] <>this<> := enterCode(<>obj<>682)

  Block[37] -> [43], ExitExc
    [0] assert(! <>y<>678 < <>obj<>680["length"])

  Call[38] -> ExitExc
    [0] call(<>fun<>688, <>this<>, <>arguments<>687) @ #517

  AfterCall[39] -> [41]

  AfterCatch[40] -> ExitExc

  Block[41] -> [42], ExitExc
    [0] <>result<>638 := <>old<>681 + <>y<>689

  LCont[42] -> [35], ExitExc
    [0] <>old<>690 := <>i<>643
    [1] <>new<>691 := @ToNumber(<>old<>690)
    [2] <>i<>643 := <>new<>691 + 1
    [3] <>Global<>ignore135 := <>new<>691
    [4] <>y<>678 := <>i<>643
    [5] <>obj<>679 := @ToObject(<>shape<>635) @ #518
    [6] <>obj<>680 := @ToObject(<>obj<>679["childLocs"]) @ #519

  LBreak[43] -> [44], ExitExc
    [0] <>old<>692 := <>result<>638
    [1] <>result<>638 := <>old<>692 + <>indent<>634 + "</" + <>tag<>639 + ">\n"

  Block[44] -> Exit, ExitExc
    [0] return(<>result<>638)

  Exit[-2]

  ExitExc[-3]

}

function[27] CompDesc.prototype.toString<>funexpr@272:31-299:2<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>711 := @ToObject(this) @ #528

  Block[1] -> Exit, ExitExc
    [0] assert(<>obj<>711["type"] === "plaintext")
    [1] <>obj<>712 := @ToObject(this) @ #529
    [2] <>obj<>713 := @ToObject(<>obj<>712["props"]) @ #530
    [3] return(<>obj<>713["text"])

  Block[2] -> [3], ExitExc
    [0] assert(<>obj<>711["type"] !== "plaintext")

  Block[3] -> [5], [4], ExitExc
    [0] <>obj<>714 := @ToObject(this) @ #531

  Block[4] -> [6], ExitExc
    [0] assert(typeof <>obj<>714["type"] === "string")
    [1] <>obj<>715 := @ToObject(this) @ #532
    [2] <>type<>705 := <>obj<>715["type"]

  Block[5] -> [6], ExitExc
    [0] assert(typeof <>obj<>714["type"] !== "string")
    [1] <>obj<>716 := @ToObject(this) @ #533
    [2] <>obj<>717 := @ToObject(<>obj<>716["type"]) @ #534
    [3] <>type<>705 := <>obj<>717["name"]

  Block[6] -> [7], ExitExc
    [0] <>result<>706 := "<" + <>type<>705 + " @" + <>loc<>703 + ""
    [1] <>obj<>718 := @ToObject(this) @ #535
    [2] <>obj<>719 := <>obj<>718["props"]
    [3] <>iterator<>720 := @iteratorInit(<>obj<>719) @ #536
    [4] <>cond1<>721 := @iteratorHasNext(<>obj<>719, <>iterator<>720)

  LoopHead[7] -> [9], [8]

  Block[8] -> [11], [10], ExitExc
    [0] assert(<>cond1<>721)
    [1] <>key<>722 := @iteratorNext(<>obj<>719, <>iterator<>720)
    [2] <>key<>707 := <>key<>722

  Block[9] -> [31], ExitExc
    [0] assert(! <>cond1<>721)

  Block[10] -> [12], ExitExc
    [0] assert(<>key<>707 === "children")
    [1] <>new1<>723 := <>key<>707 === "children"

  Block[11] -> [12], ExitExc
    [0] assert(<>key<>707 !== "children")
    [1] <>new1<>723 := <>key<>707 === "render"

  Block[12] -> [14], [13]

  Block[13] -> [19], ExitExc
    [0] assert(<>new1<>723)

  Block[14] -> [15], ExitExc
    [0] assert(! <>new1<>723)

  Block[15] -> [17], [16]

  Block[16] -> [19], ExitExc
    [0] assert(<>key<>707 === "$$instance")

  Block[17] -> [18], ExitExc
    [0] assert(<>key<>707 !== "$$instance")

  Block[18] -> [20]

  Branch[19] -> [30]

  Branch[20] -> [22], [21], ExitExc
    [0] <>obj<>724 := @ToObject(this) @ #537
    [1] <>obj<>725 := @ToObject(<>obj<>724["props"]) @ #538

  Block[21] -> [30], ExitExc
    [0] assert(<>obj<>725[<>key<>707] === undefined)

  Block[22] -> [23], ExitExc
    [0] assert(<>obj<>725[<>key<>707] !== undefined)

  Block[23] -> [25], [24], ExitExc
    [0] <>obj<>726 := @ToObject(this) @ #539
    [1] <>obj<>727 := @ToObject(<>obj<>726["props"]) @ #540

  Block[24] -> [26], ExitExc
    [0] assert(typeof <>obj<>727[<>key<>707] === "function")
    [1] <>Global<>ignore143 := "[Function]"

  Block[25] -> [27], ExitExc
    [0] assert(typeof <>obj<>727[<>key<>707] !== "function")
    [1] <>obj<>728 := @ToObject(this) @ #541
    [2] <>obj<>729 := @ToObject(<>obj<>728["props"]) @ #542
    [3] <>obj<>730 := @ToObject(<>obj<>729[<>key<>707]) @ #543
    [4] <>arguments<>731 := allocArg(0) @ #544
    [5] <>fun<>732 := @ToObject(<>obj<>730["toString"]) @ #545
    [6] <>this<> := enterCode(<>obj<>730)

  Block[26] -> [30], ExitExc
    [0] <>propStr<>708 := <>Global<>ignore143
    [1] <>old<>733 := <>result<>706
    [2] <>result<>706 := <>old<>733 + " " + <>key<>707 + "=" + "\"" + <>propStr<>708 + "\""

  Call[27] -> ExitExc
    [0] call(<>fun<>732, <>this<>, <>arguments<>731) @ #546

  AfterCall[28] -> [26]

  AfterCatch[29] -> ExitExc

  LCont[30] -> [7]
    [0] <>cond1<>721 := @iteratorHasNext(<>obj<>719, <>iterator<>720)

  LBreak[31] -> [32], ExitExc
    [0] <>old<>734 := <>result<>706
    [1] <>result<>706 := <>old<>734 + ">"
    [2] <>i<>709 := 0
    [3] <>y<>735 := <>i<>709
    [4] <>obj<>736 := @ToObject(<>childLocs<>704) @ #547

  LoopHead[32] -> [34], [33]

  Block[33] -> [36], [35], ExitExc
    [0] assert(<>y<>735 < <>obj<>736["length"])
    [1] <>old<>737 := <>result<>706
    [2] <>y<>738 := "@"
    [3] <>obj<>739 := @ToObject(<>childLocs<>704) @ #548
    [4] <>result<>706 := <>old<>737 + <>y<>738 + <>obj<>739[<>i<>709]
    [5] <>y<>740 := <>i<>709
    [6] <>obj<>741 := @ToObject(<>childLocs<>704) @ #549

  Block[34] -> [39], ExitExc
    [0] assert(! <>y<>735 < <>obj<>736["length"])

  Block[35] -> [37], ExitExc
    [0] assert(<>y<>740 < <>obj<>741["length"] - 1)
    [1] <>old<>742 := <>result<>706
    [2] <>result<>706 := <>old<>742 + ", "

  Block[36] -> [37], ExitExc
    [0] assert(! <>y<>740 < <>obj<>741["length"] - 1)

  Block[37] -> [38]

  LCont[38] -> [32], ExitExc
    [0] <>old<>743 := <>i<>709
    [1] <>new<>744 := @ToNumber(<>old<>743)
    [2] <>i<>709 := <>new<>744 + 1
    [3] <>Global<>ignore148 := <>new<>744
    [4] <>y<>735 := <>i<>709
    [5] <>obj<>736 := @ToObject(<>childLocs<>704) @ #550

  LBreak[39] -> Exit, ExitExc
    [0] <>old<>745 := <>result<>706
    [1] <>result<>706 := <>old<>745 + "</" + <>type<>705 + ">"
    [2] return(<>result<>706)

  Exit[-2]

  ExitExc[-3]

}

function[28] MountedCompDesc.prototype.toString<>funexpr@306:38-308:2<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>752 := @ToObject(this) @ #555
    [1] <>obj<>753 := @ToObject(<>obj<>752["comp"]) @ #556
    [2] <>temp<>754 := <>heap<>749
    [3] <>obj<>755 := @ToObject(this) @ #557
    [4] <>temp<>756 := <>obj<>755["loc"]
    [5] <>temp<>757 := <>childLocs<>750
    [6] <>arguments<>758 := allocArg(3) @ #558
    [7] <>arguments<>758["0"] := <>temp<>754
    [8] <>arguments<>758["1"] := <>temp<>756
    [9] <>arguments<>758["2"] := <>temp<>757
    [10] <>fun<>759 := @ToObject(<>obj<>753["toString"]) @ #559
    [11] <>this<> := enterCode(<>obj<>753)

  Call[1] -> ExitExc
    [0] call(<>fun<>759, <>this<>, <>arguments<>758) @ #560

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>760)

  Exit[-2]

  ExitExc[-3]

}

function[29] <>funexpr@311:11-317:4<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>fun<>766 := @ToObject(<>ReactState<>86) @ #563
    [1] <>arguments<>767 := allocArg(0) @ #564
    [2] <>proto<>768 := <>fun<>766["prototype"]
    [3] <>obj<>769 := alloc(<>proto<>768) @ #565

  Call[1] -> ExitExc
    [0] construct(<>fun<>766, <>obj<>769, <>arguments<>767) @ #566

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>771 := @isObject(<>newObj<>770)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>771)
    [1] <>Global<>ignore154 := <>newObj<>770

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>771)
    [1] <>Global<>ignore154 := <>obj<>769

  Block[7] -> [8], ExitExc
    [0] <>state<>764 := <>Global<>ignore154
    [1] <>obj<>772 := @ToObject(<>state<>764) @ #567
    [2] <>temp<>773 := <>element<>762
    [3] <>arguments<>774 := allocArg(1) @ #568
    [4] <>arguments<>774["0"] := <>temp<>773
    [5] <>fun<>775 := @ToObject(<>obj<>772["mountElement"]) @ #569
    [6] <>this<> := enterCode(<>obj<>772)

  Call[8] -> ExitExc
    [0] call(<>fun<>775, <>this<>, <>arguments<>774) @ #570

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [12], ExitExc
    [0] <>obj<>776 := @ToObject(<>state<>764) @ #571
    [1] <>arguments<>777 := allocArg(0) @ #572
    [2] <>fun<>778 := @ToObject(<>obj<>776["printState"]) @ #573
    [3] <>this<> := enterCode(<>obj<>776)

  Call[12] -> ExitExc
    [0] call(<>fun<>778, <>this<>, <>arguments<>777) @ #574

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> [16], ExitExc
    [0] <>Global<>ignore156 := @Print("printState", <>new1<>779)
    [1] <>obj<>780 := @ToObject(<>state<>764) @ #575
    [2] <>temp<>781 := 0
    [3] <>arguments<>782 := allocArg(1) @ #576
    [4] <>arguments<>782["0"] := <>temp<>781
    [5] <>fun<>783 := @ToObject(<>obj<>780["printHtml"]) @ #577
    [6] <>this<> := enterCode(<>obj<>780)

  Call[16] -> ExitExc
    [0] call(<>fun<>783, <>this<>, <>arguments<>782) @ #578

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>Global<>ignore157 := @Print("printHtml", <>new1<>784)
    [1] return(<>state<>764)

  Exit[-2]

  ExitExc[-3]

}

function[30] <>funexpr@319:14-354:4<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>795 := @ToObject(<>element<>787) @ #581

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>obj<>795["type"] === "string")
    [1] <>Global<>ignore158 := allocArray(0) @ #582
    [2] <>children<>789 := <>Global<>ignore158
    [3] <>i<>790 := 0
    [4] <>y<>796 := <>i<>790
    [5] <>obj<>797 := @ToObject(<>element<>787) @ #583
    [6] <>obj<>798 := @ToObject(<>obj<>797["props"]) @ #584
    [7] <>obj<>799 := @ToObject(<>obj<>798["children"]) @ #585

  Block[2] -> [17], [16], ExitExc
    [0] assert(typeof <>obj<>795["type"] !== "string")
    [1] <>obj<>814 := @ToObject(<>element<>787) @ #601
    [2] <>obj<>815 := @ToObject(<>obj<>814["type"]) @ #602
    [3] <>obj<>816 := @ToObject(<>obj<>815["prototype"]) @ #603

  LoopHead[3] -> [5], [4]

  Block[4] -> [7], [6], ExitExc
    [0] assert(<>y<>796 < <>obj<>799["length"])
    [1] <>obj<>800 := @ToObject(<>element<>787) @ #586
    [2] <>obj<>801 := @ToObject(<>obj<>800["props"]) @ #587
    [3] <>obj<>802 := @ToObject(<>obj<>801["children"]) @ #588
    [4] <>child<>791 := <>obj<>802[<>i<>790]

  Block[5] -> [14], ExitExc
    [0] assert(! <>y<>796 < <>obj<>799["length"])

  Block[6] -> [8], ExitExc
    [0] assert(typeof <>child<>791 === "string")
    [1] <>obj<>803 := @ToObject(<>children<>789) @ #589
    [2] <>obj<>803[<>i<>790] := <>child<>791

  Block[7] -> [9], ExitExc
    [0] assert(typeof <>child<>791 !== "string")
    [1] <>obj<>804 := @ToObject(<>children<>789) @ #590
    [2] <>obj<>805 := @ToObject(<>ReactDOM<>90) @ #591
    [3] <>temp<>806 := <>child<>791
    [4] <>arguments<>807 := allocArg(1) @ #592
    [5] <>arguments<>807["0"] := <>temp<>806
    [6] <>fun<>808 := @ToObject(<>obj<>805["render"]) @ #593
    [7] <>this<> := enterCode(<>obj<>805)

  Block[8] -> [13]

  Call[9] -> ExitExc
    [0] call(<>fun<>808, <>this<>, <>arguments<>807) @ #594

  AfterCall[10] -> [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> [8], ExitExc
    [0] <>obj<>804[<>i<>790] := <>Global<>ignore164

  LCont[13] -> [3], ExitExc
    [0] <>old<>809 := <>i<>790
    [1] <>new<>810 := @ToNumber(<>old<>809)
    [2] <>i<>790 := <>new<>810 + 1
    [3] <>Global<>ignore161 := <>new<>810
    [4] <>y<>796 := <>i<>790
    [5] <>obj<>797 := @ToObject(<>element<>787) @ #595
    [6] <>obj<>798 := @ToObject(<>obj<>797["props"]) @ #596
    [7] <>obj<>799 := @ToObject(<>obj<>798["children"]) @ #597

  LBreak[14] -> Exit, ExitExc
    [0] <>obj<>811 := @ToObject(<>element<>787) @ #598
    [1] <>temp<>812 := alloc() @ #599
    [2] <>temp<>812["children"] := <>children<>789
    [3] <>new1<>813 := alloc() @ #600
    [4] <>new1<>813["type"] := <>obj<>811["type"]
    [5] <>new1<>813["props"] := <>temp<>812
    [6] return(<>new1<>813)

  Block[15] -> Exit

  Block[16] -> [18], ExitExc
    [0] assert(! <>obj<>816["__class__"])
    [1] <>obj<>817 := @ToObject(<>ReactDOM<>90) @ #604
    [2] <>obj<>818 := @ToObject(<>element<>787) @ #605
    [3] <>obj<>819 := @ToObject(<>element<>787) @ #606
    [4] <>temp<>820 := <>obj<>819["props"]
    [5] <>arguments<>821 := allocArg(1) @ #607
    [6] <>arguments<>821["0"] := <>temp<>820
    [7] <>fun<>822 := @ToObject(<>obj<>818["type"]) @ #608
    [8] <>this<> := enterCode(<>obj<>818)

  Block[17] -> [27], ExitExc
    [0] assert(! ! <>obj<>816["__class__"])
    [1] <>obj<>827 := @ToObject(<>element<>787) @ #613
    [2] <>fun<>828 := @ToObject(<>obj<>827["type"]) @ #614
    [3] <>arguments<>829 := allocArg(0) @ #615
    [4] <>proto<>830 := <>fun<>828["prototype"]
    [5] <>obj<>831 := alloc(<>proto<>830) @ #616

  Call[18] -> ExitExc
    [0] call(<>fun<>822, <>this<>, <>arguments<>821) @ #609

  AfterCall[19] -> [21]

  AfterCatch[20] -> ExitExc

  Block[21] -> [22], ExitExc
    [0] <>arguments<>824 := allocArg(1) @ #610
    [1] <>arguments<>824["0"] := <>temp<>823
    [2] <>fun<>825 := @ToObject(<>obj<>817["render"]) @ #611
    [3] <>this<> := enterCode(<>obj<>817)

  Call[22] -> ExitExc
    [0] call(<>fun<>825, <>this<>, <>arguments<>824) @ #612

  AfterCall[23] -> [25]

  AfterCatch[24] -> ExitExc

  Block[25] -> Exit, ExitExc
    [0] return(<>new1<>826)

  Block[26] -> [15]

  Call[27] -> ExitExc
    [0] construct(<>fun<>828, <>obj<>831, <>arguments<>829) @ #617

  AfterCall[28] -> [30]

  AfterCatch[29] -> ExitExc

  Block[30] -> [32], [31]
    [0] <>cond<>833 := @isObject(<>newObj<>832)

  Block[31] -> [33], ExitExc
    [0] assert(<>cond<>833)
    [1] <>Global<>ignore165 := <>newObj<>832

  Block[32] -> [33], ExitExc
    [0] assert(! <>cond<>833)
    [1] <>Global<>ignore165 := <>obj<>831

  Block[33] -> [34], ExitExc
    [0] <>instance<>792 := <>Global<>ignore165
    [1] <>obj<>834 := @ToObject(<>instance<>792) @ #618
    [2] <>obj<>835 := @ToObject(<>element<>787) @ #619
    [3] <>obj<>834["props"] := <>obj<>835["props"]
    [4] <>obj<>836 := @ToObject(<>ReactDOM<>90) @ #620
    [5] <>obj<>837 := @ToObject(<>instance<>792) @ #621
    [6] <>arguments<>838 := allocArg(0) @ #622
    [7] <>fun<>839 := @ToObject(<>obj<>837["render"]) @ #623
    [8] <>this<> := enterCode(<>obj<>837)

  Call[34] -> ExitExc
    [0] call(<>fun<>839, <>this<>, <>arguments<>838) @ #624

  AfterCall[35] -> [37]

  AfterCatch[36] -> ExitExc

  Block[37] -> [38], ExitExc
    [0] <>arguments<>841 := allocArg(1) @ #625
    [1] <>arguments<>841["0"] := <>temp<>840
    [2] <>fun<>842 := @ToObject(<>obj<>836["render"]) @ #626
    [3] <>this<> := enterCode(<>obj<>836)

  Call[38] -> ExitExc
    [0] call(<>fun<>842, <>this<>, <>arguments<>841) @ #627

  AfterCall[39] -> [41]

  AfterCatch[40] -> ExitExc

  Block[41] -> Exit, ExitExc
    [0] <>rendered<>793 := <>Global<>ignore167
    [1] <>obj<>843 := @ToObject(<>rendered<>793) @ #628
    [2] <>obj<>843["instance"] := <>instance<>792
    [3] return(<>rendered<>793)

  Exit[-2]

  ExitExc[-3]

}

function[31] Square {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>849 := @ToObject(React) @ #635
    [1] <>temp<>850 := "button"
    [2] <>obj<>851 := @ToObject(<>props<>847) @ #636
    [3] <>temp<>852 := alloc() @ #637
    [4] <>temp<>852["className"] := "square"
    [5] <>temp<>852["onClick"] := <>obj<>851["onClick"]
    [6] <>obj<>853 := @ToObject(<>props<>847) @ #638
    [7] <>temp<>854 := <>obj<>853["value"]
    [8] <>arguments<>855 := allocArg(3) @ #639
    [9] <>arguments<>855["0"] := <>temp<>850
    [10] <>arguments<>855["1"] := <>temp<>852
    [11] <>arguments<>855["2"] := <>temp<>854
    [12] <>fun<>856 := @ToObject(<>obj<>849["createElement"]) @ #640
    [13] <>this<> := enterCode(<>obj<>849)

  Call[1] -> ExitExc
    [0] call(<>fun<>856, <>this<>, <>arguments<>855) @ #641

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>857)

  Exit[-2]

  ExitExc[-3]

}

function[32] Board {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[33] Game {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>861 := @ToObject(React) @ #646
    [1] <>obj<>862 := @ToObject(<>obj<>861["Component"]) @ #647
    [2] <>temp<>863 := this
    [3] <>temp<>864 := <>props<>859
    [4] <>arguments<>865 := allocArg(2) @ #648
    [5] <>arguments<>865["0"] := <>temp<>863
    [6] <>arguments<>865["1"] := <>temp<>864
    [7] <>fun<>866 := @ToObject(<>obj<>862["call"]) @ #649
    [8] <>this<> := enterCode(<>obj<>862)

  Call[1] -> ExitExc
    [0] call(<>fun<>866, <>this<>, <>arguments<>865) @ #650

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [5], ExitExc
    [0] <>obj<>867 := @ToObject(this) @ #651
    [1] <>obj<>868 := @ToObject(Array) @ #652
    [2] <>temp<>869 := 9
    [3] <>arguments<>870 := allocArg(1) @ #653
    [4] <>arguments<>870["0"] := <>temp<>869
    [5] <>fun<>871 := @GetBase(Array)
    [6] <>this<> := enterCode(<>fun<>871)

  Call[5] -> ExitExc
    [0] call(<>obj<>868, <>this<>, <>arguments<>870) @ #654

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [9], ExitExc
    [0] <>obj<>873 := @ToObject(<>obj1<>872) @ #655
    [1] <>temp<>874 := null
    [2] <>arguments<>875 := allocArg(1) @ #656
    [3] <>arguments<>875["0"] := <>temp<>874
    [4] <>fun<>876 := @ToObject(<>obj<>873["fill"]) @ #657
    [5] <>this<> := enterCode(<>obj<>873)

  Call[9] -> ExitExc
    [0] call(<>fun<>876, <>this<>, <>arguments<>875) @ #658

  AfterCall[10] -> [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> Exit, ExitExc
    [0] <>temp<>878 := alloc() @ #659
    [1] <>temp<>878["squares"] := <>temp<>877
    [2] <>temp<>879 := allocArray(1) @ #660
    [3] <>temp<>879["0"] := <>temp<>878
    [4] <>Global<>ignore171 := alloc() @ #661
    [5] <>Global<>ignore171["history"] := <>temp<>879
    [6] <>Global<>ignore171["stepNumber"] := 0
    [7] <>Global<>ignore171["xIsNext"] := true
    [8] <>obj<>867["state"] := <>Global<>ignore171

  Exit[-2]

  ExitExc[-3]

}

function[34] calculateWinner {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>temp<>884 := 0
    [1] <>temp<>885 := 1
    [2] <>temp<>886 := 2
    [3] <>temp<>887 := allocArray(3) @ #664
    [4] <>temp<>887["0"] := <>temp<>884
    [5] <>temp<>887["1"] := <>temp<>885
    [6] <>temp<>887["2"] := <>temp<>886
    [7] <>temp<>888 := 3
    [8] <>temp<>889 := 4
    [9] <>temp<>890 := 5
    [10] <>temp<>891 := allocArray(3) @ #665
    [11] <>temp<>891["0"] := <>temp<>888
    [12] <>temp<>891["1"] := <>temp<>889
    [13] <>temp<>891["2"] := <>temp<>890
    [14] <>temp<>892 := 6
    [15] <>temp<>893 := 7
    [16] <>temp<>894 := 8
    [17] <>temp<>895 := allocArray(3) @ #666
    [18] <>temp<>895["0"] := <>temp<>892
    [19] <>temp<>895["1"] := <>temp<>893
    [20] <>temp<>895["2"] := <>temp<>894
    [21] <>temp<>896 := 0
    [22] <>temp<>897 := 3
    [23] <>temp<>898 := 6
    [24] <>temp<>899 := allocArray(3) @ #667
    [25] <>temp<>899["0"] := <>temp<>896
    [26] <>temp<>899["1"] := <>temp<>897
    [27] <>temp<>899["2"] := <>temp<>898
    [28] <>temp<>900 := 1
    [29] <>temp<>901 := 4
    [30] <>temp<>902 := 7
    [31] <>temp<>903 := allocArray(3) @ #668
    [32] <>temp<>903["0"] := <>temp<>900
    [33] <>temp<>903["1"] := <>temp<>901
    [34] <>temp<>903["2"] := <>temp<>902
    [35] <>temp<>904 := 2
    [36] <>temp<>905 := 5
    [37] <>temp<>906 := 8
    [38] <>temp<>907 := allocArray(3) @ #669
    [39] <>temp<>907["0"] := <>temp<>904
    [40] <>temp<>907["1"] := <>temp<>905
    [41] <>temp<>907["2"] := <>temp<>906
    [42] <>temp<>908 := 0
    [43] <>temp<>909 := 4
    [44] <>temp<>910 := 8
    [45] <>temp<>911 := allocArray(3) @ #670
    [46] <>temp<>911["0"] := <>temp<>908
    [47] <>temp<>911["1"] := <>temp<>909
    [48] <>temp<>911["2"] := <>temp<>910
    [49] <>temp<>912 := 2
    [50] <>temp<>913 := 4
    [51] <>temp<>914 := 6
    [52] <>temp<>915 := allocArray(3) @ #671
    [53] <>temp<>915["0"] := <>temp<>912
    [54] <>temp<>915["1"] := <>temp<>913
    [55] <>temp<>915["2"] := <>temp<>914
    [56] <>Global<>ignore172 := allocArray(8) @ #672
    [57] <>Global<>ignore172["0"] := <>temp<>887
    [58] <>Global<>ignore172["1"] := <>temp<>891
    [59] <>Global<>ignore172["2"] := <>temp<>895
    [60] <>Global<>ignore172["3"] := <>temp<>899
    [61] <>Global<>ignore172["4"] := <>temp<>903
    [62] <>Global<>ignore172["5"] := <>temp<>907
    [63] <>Global<>ignore172["6"] := <>temp<>911
    [64] <>Global<>ignore172["7"] := <>temp<>915
    [65] <>lines<>881 := <>Global<>ignore172
    [66] <>i<>882 := 0
    [67] <>y<>916 := <>i<>882
    [68] <>obj<>917 := @ToObject(<>lines<>881) @ #673

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>y<>916 < <>obj<>917["length"])
    [1] <>obj<>918 := @ToObject(const) @ #674
    [2] <>temp<>919 := a
    [3] <>temp<>920 := b
    [4] <>obj<>921 := @ToObject(<>lines<>881) @ #675
    [5] <>obj<>918[c] := <>obj<>921[<>i<>882]
    [6] <>obj<>922 := @ToObject(<>squares<>880) @ #676

  Block[3] -> [20], ExitExc
    [0] assert(! <>y<>916 < <>obj<>917["length"])

  Block[4] -> [7], [6], ExitExc
    [0] assert(<>obj<>922[a])
    [1] <>obj<>923 := @ToObject(<>squares<>880) @ #677
    [2] <>y<>924 := <>obj<>923[a]
    [3] <>obj<>925 := @ToObject(<>squares<>880) @ #678

  Block[5] -> [14], [13], ExitExc
    [0] assert(! <>obj<>922[a])

  Block[6] -> [8], ExitExc
    [0] assert(<>y<>924 === <>obj<>925[b])
    [1] <>obj<>926 := @ToObject(<>squares<>880) @ #679
    [2] <>y<>927 := <>obj<>926[a]
    [3] <>obj<>928 := @ToObject(<>squares<>880) @ #680
    [4] <>new<>929 := <>y<>927 === <>obj<>928[c]

  Block[7] -> [10], [9], ExitExc
    [0] assert(<>y<>924 !== <>obj<>925[b])

  Block[8] -> [12]

  Block[9] -> [11], ExitExc
    [0] assert(typeof <>y<>924 === <>obj<>925[b] == "boolean")
    [1] <>new<>929 := false

  Block[10] -> [11], ExitExc
    [0] assert(typeof <>y<>924 === <>obj<>925[b] != "boolean")
    [1] <>new<>929 := <>y<>924 === <>obj<>925[b]

  Block[11] -> [8]

  Block[12] -> [17], [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof <>obj<>922[a] == "boolean")
    [1] <>new<>929 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof <>obj<>922[a] != "boolean")
    [1] <>new<>929 := <>obj<>922[a]

  Block[15] -> [12]

  Block[16] -> Exit, ExitExc
    [0] assert(<>new<>929)
    [1] <>obj<>930 := @ToObject(<>squares<>880) @ #681
    [2] return(<>obj<>930[a])

  Block[17] -> [18], ExitExc
    [0] assert(! <>new<>929)

  Block[18] -> [19]

  LCont[19] -> [1], ExitExc
    [0] <>old<>931 := <>i<>882
    [1] <>new<>932 := @ToNumber(<>old<>931)
    [2] <>i<>882 := <>new<>932 + 1
    [3] <>Global<>ignore175 := <>new<>932
    [4] <>y<>916 := <>i<>882
    [5] <>obj<>917 := @ToObject(<>lines<>881) @ #682

  LBreak[20] -> Exit, ExitExc
    [0] return(null)

  Exit[-2]

  ExitExc[-3]

}

function[35] renderSquare {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>954 := @ToObject(React) @ #704
    [1] <>temp<>955 := Square
    [2] <>obj<>956 := @ToObject(this) @ #705
    [3] <>obj<>957 := @ToObject(<>obj<>956["props"]) @ #706
    [4] <>obj<>958 := @ToObject(<>obj<>957["squares"]) @ #707
    [5] <>temp<>967 := function (36) @ #713, #714
    [6] <>temp<>968 := alloc() @ #715
    [7] <>temp<>968["value"] := <>obj<>958[<>i<>952]
    [8] <>temp<>968["onClick"] := <>temp<>967
    [9] <>arguments<>969 := allocArg(2) @ #716
    [10] <>arguments<>969["0"] := <>temp<>955
    [11] <>arguments<>969["1"] := <>temp<>968
    [12] <>fun<>970 := @ToObject(<>obj<>954["createElement"]) @ #717
    [13] <>this<> := enterCode(<>obj<>954)

  Call[1] -> ExitExc
    [0] call(<>fun<>970, <>this<>, <>arguments<>969) @ #718

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>971)

  Exit[-2]

  ExitExc[-3]

}

function[36] <>funexpr@16:22-17:10<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>960 := @ToObject(this) @ #708
    [1] <>obj<>961 := @ToObject(<>obj<>960["props"]) @ #709
    [2] <>temp<>962 := <>i<>952
    [3] <>arguments<>963 := allocArg(1) @ #710
    [4] <>arguments<>963["0"] := <>temp<>962
    [5] <>fun<>964 := @ToObject(<>obj<>961["onClick"]) @ #711
    [6] <>this<> := enterCode(<>obj<>961)

  Call[1] -> ExitExc
    [0] call(<>fun<>964, <>this<>, <>arguments<>963) @ #712

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>965)

  Exit[-2]

  ExitExc[-3]

}

function[37] render {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>976 := @ToObject(React) @ #723
    [1] <>temp<>977 := "div"
    [2] <>temp<>978 := null
    [3] <>obj<>979 := @ToObject(React) @ #724
    [4] <>temp<>980 := "div"
    [5] <>temp<>981 := alloc() @ #725
    [6] <>temp<>981["className"] := "board-row"
    [7] <>obj<>982 := @ToObject(this) @ #726
    [8] <>temp<>983 := 0
    [9] <>arguments<>984 := allocArg(1) @ #727
    [10] <>arguments<>984["0"] := <>temp<>983
    [11] <>fun<>985 := @ToObject(<>obj<>982["renderSquare"]) @ #728
    [12] <>this<> := enterCode(<>obj<>982)

  Call[1] -> ExitExc
    [0] call(<>fun<>985, <>this<>, <>arguments<>984) @ #729

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [5], ExitExc
    [0] <>obj<>987 := @ToObject(this) @ #730
    [1] <>temp<>988 := 1
    [2] <>arguments<>989 := allocArg(1) @ #731
    [3] <>arguments<>989["0"] := <>temp<>988
    [4] <>fun<>990 := @ToObject(<>obj<>987["renderSquare"]) @ #732
    [5] <>this<> := enterCode(<>obj<>987)

  Call[5] -> ExitExc
    [0] call(<>fun<>990, <>this<>, <>arguments<>989) @ #733

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [9], ExitExc
    [0] <>obj<>992 := @ToObject(this) @ #734
    [1] <>temp<>993 := 2
    [2] <>arguments<>994 := allocArg(1) @ #735
    [3] <>arguments<>994["0"] := <>temp<>993
    [4] <>fun<>995 := @ToObject(<>obj<>992["renderSquare"]) @ #736
    [5] <>this<> := enterCode(<>obj<>992)

  Call[9] -> ExitExc
    [0] call(<>fun<>995, <>this<>, <>arguments<>994) @ #737

  AfterCall[10] -> [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> [13], ExitExc
    [0] <>arguments<>997 := allocArg(5) @ #738
    [1] <>arguments<>997["0"] := <>temp<>980
    [2] <>arguments<>997["1"] := <>temp<>981
    [3] <>arguments<>997["2"] := <>temp<>986
    [4] <>arguments<>997["3"] := <>temp<>991
    [5] <>arguments<>997["4"] := <>temp<>996
    [6] <>fun<>998 := @ToObject(<>obj<>979["createElement"]) @ #739
    [7] <>this<> := enterCode(<>obj<>979)

  Call[13] -> ExitExc
    [0] call(<>fun<>998, <>this<>, <>arguments<>997) @ #740

  AfterCall[14] -> [16]

  AfterCatch[15] -> ExitExc

  Block[16] -> [17], ExitExc
    [0] <>obj<>1000 := @ToObject(React) @ #741
    [1] <>temp<>1001 := "div"
    [2] <>temp<>1002 := alloc() @ #742
    [3] <>temp<>1002["className"] := "board-row"
    [4] <>obj<>1003 := @ToObject(this) @ #743
    [5] <>temp<>1004 := 3
    [6] <>arguments<>1005 := allocArg(1) @ #744
    [7] <>arguments<>1005["0"] := <>temp<>1004
    [8] <>fun<>1006 := @ToObject(<>obj<>1003["renderSquare"]) @ #745
    [9] <>this<> := enterCode(<>obj<>1003)

  Call[17] -> ExitExc
    [0] call(<>fun<>1006, <>this<>, <>arguments<>1005) @ #746

  AfterCall[18] -> [20]

  AfterCatch[19] -> ExitExc

  Block[20] -> [21], ExitExc
    [0] <>obj<>1008 := @ToObject(this) @ #747
    [1] <>temp<>1009 := 4
    [2] <>arguments<>1010 := allocArg(1) @ #748
    [3] <>arguments<>1010["0"] := <>temp<>1009
    [4] <>fun<>1011 := @ToObject(<>obj<>1008["renderSquare"]) @ #749
    [5] <>this<> := enterCode(<>obj<>1008)

  Call[21] -> ExitExc
    [0] call(<>fun<>1011, <>this<>, <>arguments<>1010) @ #750

  AfterCall[22] -> [24]

  AfterCatch[23] -> ExitExc

  Block[24] -> [25], ExitExc
    [0] <>obj<>1013 := @ToObject(this) @ #751
    [1] <>temp<>1014 := 5
    [2] <>arguments<>1015 := allocArg(1) @ #752
    [3] <>arguments<>1015["0"] := <>temp<>1014
    [4] <>fun<>1016 := @ToObject(<>obj<>1013["renderSquare"]) @ #753
    [5] <>this<> := enterCode(<>obj<>1013)

  Call[25] -> ExitExc
    [0] call(<>fun<>1016, <>this<>, <>arguments<>1015) @ #754

  AfterCall[26] -> [28]

  AfterCatch[27] -> ExitExc

  Block[28] -> [29], ExitExc
    [0] <>arguments<>1018 := allocArg(5) @ #755
    [1] <>arguments<>1018["0"] := <>temp<>1001
    [2] <>arguments<>1018["1"] := <>temp<>1002
    [3] <>arguments<>1018["2"] := <>temp<>1007
    [4] <>arguments<>1018["3"] := <>temp<>1012
    [5] <>arguments<>1018["4"] := <>temp<>1017
    [6] <>fun<>1019 := @ToObject(<>obj<>1000["createElement"]) @ #756
    [7] <>this<> := enterCode(<>obj<>1000)

  Call[29] -> ExitExc
    [0] call(<>fun<>1019, <>this<>, <>arguments<>1018) @ #757

  AfterCall[30] -> [32]

  AfterCatch[31] -> ExitExc

  Block[32] -> [33], ExitExc
    [0] <>obj<>1021 := @ToObject(React) @ #758
    [1] <>temp<>1022 := "div"
    [2] <>temp<>1023 := alloc() @ #759
    [3] <>temp<>1023["className"] := "board-row"
    [4] <>obj<>1024 := @ToObject(this) @ #760
    [5] <>temp<>1025 := 6
    [6] <>arguments<>1026 := allocArg(1) @ #761
    [7] <>arguments<>1026["0"] := <>temp<>1025
    [8] <>fun<>1027 := @ToObject(<>obj<>1024["renderSquare"]) @ #762
    [9] <>this<> := enterCode(<>obj<>1024)

  Call[33] -> ExitExc
    [0] call(<>fun<>1027, <>this<>, <>arguments<>1026) @ #763

  AfterCall[34] -> [36]

  AfterCatch[35] -> ExitExc

  Block[36] -> [37], ExitExc
    [0] <>obj<>1029 := @ToObject(this) @ #764
    [1] <>temp<>1030 := 7
    [2] <>arguments<>1031 := allocArg(1) @ #765
    [3] <>arguments<>1031["0"] := <>temp<>1030
    [4] <>fun<>1032 := @ToObject(<>obj<>1029["renderSquare"]) @ #766
    [5] <>this<> := enterCode(<>obj<>1029)

  Call[37] -> ExitExc
    [0] call(<>fun<>1032, <>this<>, <>arguments<>1031) @ #767

  AfterCall[38] -> [40]

  AfterCatch[39] -> ExitExc

  Block[40] -> [41], ExitExc
    [0] <>obj<>1034 := @ToObject(this) @ #768
    [1] <>temp<>1035 := 8
    [2] <>arguments<>1036 := allocArg(1) @ #769
    [3] <>arguments<>1036["0"] := <>temp<>1035
    [4] <>fun<>1037 := @ToObject(<>obj<>1034["renderSquare"]) @ #770
    [5] <>this<> := enterCode(<>obj<>1034)

  Call[41] -> ExitExc
    [0] call(<>fun<>1037, <>this<>, <>arguments<>1036) @ #771

  AfterCall[42] -> [44]

  AfterCatch[43] -> ExitExc

  Block[44] -> [45], ExitExc
    [0] <>arguments<>1039 := allocArg(5) @ #772
    [1] <>arguments<>1039["0"] := <>temp<>1022
    [2] <>arguments<>1039["1"] := <>temp<>1023
    [3] <>arguments<>1039["2"] := <>temp<>1028
    [4] <>arguments<>1039["3"] := <>temp<>1033
    [5] <>arguments<>1039["4"] := <>temp<>1038
    [6] <>fun<>1040 := @ToObject(<>obj<>1021["createElement"]) @ #773
    [7] <>this<> := enterCode(<>obj<>1021)

  Call[45] -> ExitExc
    [0] call(<>fun<>1040, <>this<>, <>arguments<>1039) @ #774

  AfterCall[46] -> [48]

  AfterCatch[47] -> ExitExc

  Block[48] -> [49], ExitExc
    [0] <>arguments<>1042 := allocArg(5) @ #775
    [1] <>arguments<>1042["0"] := <>temp<>977
    [2] <>arguments<>1042["1"] := <>temp<>978
    [3] <>arguments<>1042["2"] := <>temp<>999
    [4] <>arguments<>1042["3"] := <>temp<>1020
    [5] <>arguments<>1042["4"] := <>temp<>1041
    [6] <>fun<>1043 := @ToObject(<>obj<>976["createElement"]) @ #776
    [7] <>this<> := enterCode(<>obj<>976)

  Call[49] -> ExitExc
    [0] call(<>fun<>1043, <>this<>, <>arguments<>1042) @ #777

  AfterCall[50] -> [52]

  AfterCatch[51] -> ExitExc

  Block[52] -> Exit, ExitExc
    [0] return(<>new1<>1044)

  Exit[-2]

  ExitExc[-3]

}

function[38] handleClick {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>1062 := @ToObject(this) @ #791
    [1] <>obj<>1063 := @ToObject(<>obj<>1062["state"]) @ #792
    [2] <>obj<>1064 := @ToObject(<>obj<>1063["history"]) @ #793
    [3] <>temp<>1065 := 0
    [4] <>obj<>1066 := @ToObject(this) @ #794
    [5] <>obj<>1067 := @ToObject(<>obj<>1066["state"]) @ #795
    [6] <>temp<>1068 := <>obj<>1067["stepNumber"] + 1
    [7] <>arguments<>1069 := allocArg(2) @ #796
    [8] <>arguments<>1069["0"] := <>temp<>1065
    [9] <>arguments<>1069["1"] := <>temp<>1068
    [10] <>fun<>1070 := @ToObject(<>obj<>1064["slice"]) @ #797
    [11] <>this<> := enterCode(<>obj<>1064)

  Call[1] -> ExitExc
    [0] call(<>fun<>1070, <>this<>, <>arguments<>1069) @ #798

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [5], ExitExc
    [0] <>history<>1058 := <>Global<>ignore188
    [1] <>obj<>1071 := @ToObject(<>history<>1058) @ #799
    [2] <>obj<>1072 := @ToObject(<>history<>1058) @ #800
    [3] <>current<>1059 := <>obj<>1071[<>obj<>1072["length"] - 1]
    [4] <>obj<>1073 := @ToObject(<>current<>1059) @ #801
    [5] <>obj<>1074 := @ToObject(<>obj<>1073["squares"]) @ #802
    [6] <>arguments<>1075 := allocArg(0) @ #803
    [7] <>fun<>1076 := @ToObject(<>obj<>1074["slice"]) @ #804
    [8] <>this<> := enterCode(<>obj<>1074)

  Call[5] -> ExitExc
    [0] call(<>fun<>1076, <>this<>, <>arguments<>1075) @ #805

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [9], ExitExc
    [0] <>squares<>1060 := <>Global<>ignore190
    [1] <>obj<>1077 := @ToObject(calculateWinner) @ #806
    [2] <>temp<>1078 := <>squares<>1060
    [3] <>arguments<>1079 := allocArg(1) @ #807
    [4] <>arguments<>1079["0"] := <>temp<>1078
    [5] <>fun<>1080 := @GetBase(calculateWinner)
    [6] <>this<> := enterCode(<>fun<>1080)

  Call[9] -> ExitExc
    [0] call(<>obj<>1077, <>this<>, <>arguments<>1079) @ #808

  AfterCall[10] -> [13], [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> [18], ExitExc
    [0] assert(<>new1<>1081)

  Block[13] -> [14], ExitExc
    [0] assert(! <>new1<>1081)

  Block[14] -> [16], [15], ExitExc
    [0] <>obj<>1082 := @ToObject(<>squares<>1060) @ #809

  Block[15] -> [18], ExitExc
    [0] assert(<>obj<>1082[<>i<>1057])

  Block[16] -> [17], ExitExc
    [0] assert(! <>obj<>1082[<>i<>1057])

  Block[17] -> [19]

  Branch[18] -> Exit, ExitExc
    [0] return()

  Branch[19] -> [21], [20], ExitExc
    [0] <>obj<>1083 := @ToObject(<>squares<>1060) @ #810
    [1] <>obj<>1084 := @ToObject(this) @ #811
    [2] <>obj<>1085 := @ToObject(<>obj<>1084["state"]) @ #812

  Block[20] -> [22], ExitExc
    [0] assert(<>obj<>1085["xIsNext"])
    [1] <>Global<>ignore191 := "X"

  Block[21] -> [22], ExitExc
    [0] assert(! <>obj<>1085["xIsNext"])
    [1] <>Global<>ignore191 := "O"

  Block[22] -> [23], ExitExc
    [0] <>obj<>1083[<>i<>1057] := <>Global<>ignore191
    [1] <>obj<>1086 := @ToObject(this) @ #813
    [2] <>obj<>1087 := @ToObject(<>history<>1058) @ #814
    [3] <>temp<>1088 := alloc() @ #815
    [4] <>temp<>1088["squares"] := <>squares<>1060
    [5] <>temp<>1089 := allocArray(1) @ #816
    [6] <>temp<>1089["0"] := <>temp<>1088
    [7] <>arguments<>1090 := allocArg(1) @ #817
    [8] <>arguments<>1090["0"] := <>temp<>1089
    [9] <>fun<>1091 := @ToObject(<>obj<>1087["concat"]) @ #818
    [10] <>this<> := enterCode(<>obj<>1087)

  Call[23] -> ExitExc
    [0] call(<>fun<>1091, <>this<>, <>arguments<>1090) @ #819

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [27], ExitExc
    [0] <>obj<>1093 := @ToObject(<>history<>1058) @ #820
    [1] <>obj<>1094 := @ToObject(this) @ #821
    [2] <>obj<>1095 := @ToObject(<>obj<>1094["state"]) @ #822
    [3] <>temp<>1096 := alloc() @ #823
    [4] <>temp<>1096["history"] := <>temp<>1092
    [5] <>temp<>1096["stepNumber"] := <>obj<>1093["length"]
    [6] <>temp<>1096["xIsNext"] := ! <>obj<>1095["xIsNext"]
    [7] <>arguments<>1097 := allocArg(1) @ #824
    [8] <>arguments<>1097["0"] := <>temp<>1096
    [9] <>fun<>1098 := @ToObject(<>obj<>1086["setState"]) @ #825
    [10] <>this<> := enterCode(<>obj<>1086)

  Call[27] -> ExitExc
    [0] call(<>fun<>1098, <>this<>, <>arguments<>1097) @ #826

  AfterCall[28] -> Exit

  AfterCatch[29] -> ExitExc

  Exit[-2]

  ExitExc[-3]

}

function[39] jumpTo {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>1104 := @ToObject(this) @ #831
    [1] <>temp<>1105 := alloc() @ #832
    [2] <>temp<>1105["stepNumber"] := <>step<>1102
    [3] <>temp<>1105["xIsNext"] := <>step<>1102 % 2 === 0
    [4] <>arguments<>1106 := allocArg(1) @ #833
    [5] <>arguments<>1106["0"] := <>temp<>1105
    [6] <>fun<>1107 := @ToObject(<>obj<>1104["setState"]) @ #834
    [7] <>this<> := enterCode(<>obj<>1104)

  Call[1] -> ExitExc
    [0] call(<>fun<>1107, <>this<>, <>arguments<>1106) @ #835

  AfterCall[2] -> Exit

  AfterCatch[3] -> ExitExc

  Exit[-2]

  ExitExc[-3]

}

function[40] render {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>1117 := @ToObject(this) @ #840
    [1] <>obj<>1118 := @ToObject(<>obj<>1117["state"]) @ #841
    [2] <>history<>1111 := <>obj<>1118["history"]
    [3] <>obj<>1119 := @ToObject(<>history<>1111) @ #842
    [4] <>obj<>1120 := @ToObject(this) @ #843
    [5] <>obj<>1121 := @ToObject(<>obj<>1120["state"]) @ #844
    [6] <>current<>1112 := <>obj<>1119[<>obj<>1121["stepNumber"]]
    [7] <>obj<>1122 := @ToObject(calculateWinner) @ #845
    [8] <>obj<>1123 := @ToObject(<>current<>1112) @ #846
    [9] <>temp<>1124 := <>obj<>1123["squares"]
    [10] <>arguments<>1125 := allocArg(1) @ #847
    [11] <>arguments<>1125["0"] := <>temp<>1124
    [12] <>fun<>1126 := @GetBase(calculateWinner)
    [13] <>this<> := enterCode(<>fun<>1126)

  Call[1] -> ExitExc
    [0] call(<>obj<>1122, <>this<>, <>arguments<>1125) @ #848

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [5], ExitExc
    [0] <>winner<>1113 := <>Global<>ignore198
    [1] <>obj<>1127 := @ToObject(<>history<>1111) @ #849
    [2] <>temp<>1154 := function (41) @ #866, #867
    [3] <>arguments<>1155 := allocArg(1) @ #868
    [4] <>arguments<>1155["0"] := <>temp<>1154
    [5] <>fun<>1156 := @ToObject(<>obj<>1127["map"]) @ #869
    [6] <>this<> := enterCode(<>obj<>1127)

  Call[5] -> ExitExc
    [0] call(<>fun<>1156, <>this<>, <>arguments<>1155) @ #870

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [10], [9], ExitExc
    [0] <>moves<>1114 := <>Global<>ignore199

  Block[9] -> [11], ExitExc
    [0] assert(<>winner<>1113)
    [1] <>status<>1115 := "Winner: " + <>winner<>1113

  Block[10] -> [13], [12], ExitExc
    [0] assert(! <>winner<>1113)
    [1] <>y<>1157 := "Next player: "
    [2] <>obj<>1158 := @ToObject(this) @ #871
    [3] <>obj<>1159 := @ToObject(<>obj<>1158["state"]) @ #872

  Block[11] -> [15], ExitExc
    [0] <>obj<>1161 := @ToObject(React) @ #873
    [1] <>temp<>1162 := "div"
    [2] <>temp<>1163 := alloc() @ #874
    [3] <>temp<>1163["className"] := "game"
    [4] <>obj<>1164 := @ToObject(React) @ #875
    [5] <>temp<>1165 := "div"
    [6] <>temp<>1166 := alloc() @ #876
    [7] <>temp<>1166["className"] := "game-board"
    [8] <>obj<>1167 := @ToObject(React) @ #877
    [9] <>temp<>1168 := Board
    [10] <>obj<>1169 := @ToObject(<>current<>1112) @ #878
    [11] <>temp<>1178 := function (43) @ #883, #884
    [12] <>temp<>1179 := alloc() @ #885
    [13] <>temp<>1179["squares"] := <>obj<>1169["squares"]
    [14] <>temp<>1179["onClick"] := <>temp<>1178
    [15] <>arguments<>1180 := allocArg(2) @ #886
    [16] <>arguments<>1180["0"] := <>temp<>1168
    [17] <>arguments<>1180["1"] := <>temp<>1179
    [18] <>fun<>1181 := @ToObject(<>obj<>1167["createElement"]) @ #887
    [19] <>this<> := enterCode(<>obj<>1167)

  Block[12] -> [14], ExitExc
    [0] assert(<>obj<>1159["xIsNext"])
    [1] <>z<>1160 := "X"

  Block[13] -> [14], ExitExc
    [0] assert(! <>obj<>1159["xIsNext"])
    [1] <>z<>1160 := "O"

  Block[14] -> [11], ExitExc
    [0] <>status<>1115 := <>y<>1157 + <>z<>1160

  Call[15] -> ExitExc
    [0] call(<>fun<>1181, <>this<>, <>arguments<>1180) @ #888

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> [19], ExitExc
    [0] <>arguments<>1183 := allocArg(3) @ #889
    [1] <>arguments<>1183["0"] := <>temp<>1165
    [2] <>arguments<>1183["1"] := <>temp<>1166
    [3] <>arguments<>1183["2"] := <>temp<>1182
    [4] <>fun<>1184 := @ToObject(<>obj<>1164["createElement"]) @ #890
    [5] <>this<> := enterCode(<>obj<>1164)

  Call[19] -> ExitExc
    [0] call(<>fun<>1184, <>this<>, <>arguments<>1183) @ #891

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [23], ExitExc
    [0] <>obj<>1186 := @ToObject(React) @ #892
    [1] <>temp<>1187 := "div"
    [2] <>temp<>1188 := alloc() @ #893
    [3] <>temp<>1188["className"] := "game-info"
    [4] <>obj<>1189 := @ToObject(React) @ #894
    [5] <>temp<>1190 := "div"
    [6] <>temp<>1191 := null
    [7] <>temp<>1192 := <>status<>1115
    [8] <>arguments<>1193 := allocArg(3) @ #895
    [9] <>arguments<>1193["0"] := <>temp<>1190
    [10] <>arguments<>1193["1"] := <>temp<>1191
    [11] <>arguments<>1193["2"] := <>temp<>1192
    [12] <>fun<>1194 := @ToObject(<>obj<>1189["createElement"]) @ #896
    [13] <>this<> := enterCode(<>obj<>1189)

  Call[23] -> ExitExc
    [0] call(<>fun<>1194, <>this<>, <>arguments<>1193) @ #897

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [27], ExitExc
    [0] <>obj<>1196 := @ToObject(React) @ #898
    [1] <>temp<>1197 := "ol"
    [2] <>temp<>1198 := null
    [3] <>temp<>1199 := <>moves<>1114
    [4] <>arguments<>1200 := allocArg(3) @ #899
    [5] <>arguments<>1200["0"] := <>temp<>1197
    [6] <>arguments<>1200["1"] := <>temp<>1198
    [7] <>arguments<>1200["2"] := <>temp<>1199
    [8] <>fun<>1201 := @ToObject(<>obj<>1196["createElement"]) @ #900
    [9] <>this<> := enterCode(<>obj<>1196)

  Call[27] -> ExitExc
    [0] call(<>fun<>1201, <>this<>, <>arguments<>1200) @ #901

  AfterCall[28] -> [30]

  AfterCatch[29] -> ExitExc

  Block[30] -> [31], ExitExc
    [0] <>arguments<>1203 := allocArg(4) @ #902
    [1] <>arguments<>1203["0"] := <>temp<>1187
    [2] <>arguments<>1203["1"] := <>temp<>1188
    [3] <>arguments<>1203["2"] := <>temp<>1195
    [4] <>arguments<>1203["3"] := <>temp<>1202
    [5] <>fun<>1204 := @ToObject(<>obj<>1186["createElement"]) @ #903
    [6] <>this<> := enterCode(<>obj<>1186)

  Call[31] -> ExitExc
    [0] call(<>fun<>1204, <>this<>, <>arguments<>1203) @ #904

  AfterCall[32] -> [34]

  AfterCatch[33] -> ExitExc

  Block[34] -> [35], ExitExc
    [0] <>arguments<>1206 := allocArg(4) @ #905
    [1] <>arguments<>1206["0"] := <>temp<>1162
    [2] <>arguments<>1206["1"] := <>temp<>1163
    [3] <>arguments<>1206["2"] := <>temp<>1185
    [4] <>arguments<>1206["3"] := <>temp<>1205
    [5] <>fun<>1207 := @ToObject(<>obj<>1161["createElement"]) @ #906
    [6] <>this<> := enterCode(<>obj<>1161)

  Call[35] -> ExitExc
    [0] call(<>fun<>1207, <>this<>, <>arguments<>1206) @ #907

  AfterCall[36] -> [38]

  AfterCatch[37] -> ExitExc

  Block[38] -> Exit, ExitExc
    [0] return(<>new1<>1208)

  Exit[-2]

  ExitExc[-3]

}

function[41] <>funexpr@74:35-81:10<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(<>move<>1129)
    [1] <>Global<>ignore200 := "Go to move #" + <>move<>1129

  Block[2] -> [3], ExitExc
    [0] assert(! <>move<>1129)
    [1] <>Global<>ignore200 := "Go to game start"

  Block[3] -> [4], ExitExc
    [0] <>desc<>1130 := <>Global<>ignore200
    [1] <>obj<>1132 := @ToObject(React) @ #850
    [2] <>temp<>1133 := "li"
    [3] <>temp<>1134 := alloc() @ #851
    [4] <>temp<>1134["key"] := <>move<>1129
    [5] <>obj<>1135 := @ToObject(React) @ #852
    [6] <>temp<>1136 := "button"
    [7] <>temp<>1144 := function (42) @ #857, #858
    [8] <>temp<>1145 := alloc() @ #859
    [9] <>temp<>1145["onClick"] := <>temp<>1144
    [10] <>temp<>1146 := <>desc<>1130
    [11] <>arguments<>1147 := allocArg(3) @ #860
    [12] <>arguments<>1147["0"] := <>temp<>1136
    [13] <>arguments<>1147["1"] := <>temp<>1145
    [14] <>arguments<>1147["2"] := <>temp<>1146
    [15] <>fun<>1148 := @ToObject(<>obj<>1135["createElement"]) @ #861
    [16] <>this<> := enterCode(<>obj<>1135)

  Call[4] -> ExitExc
    [0] call(<>fun<>1148, <>this<>, <>arguments<>1147) @ #862

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> [8], ExitExc
    [0] <>arguments<>1150 := allocArg(3) @ #863
    [1] <>arguments<>1150["0"] := <>temp<>1133
    [2] <>arguments<>1150["1"] := <>temp<>1134
    [3] <>arguments<>1150["2"] := <>temp<>1149
    [4] <>fun<>1151 := @ToObject(<>obj<>1132["createElement"]) @ #864
    [5] <>this<> := enterCode(<>obj<>1132)

  Call[8] -> ExitExc
    [0] call(<>fun<>1151, <>this<>, <>arguments<>1150) @ #865

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> Exit, ExitExc
    [0] return(<>new1<>1152)

  Exit[-2]

  ExitExc[-3]

}

function[42] <>funexpr@79:26-80:14<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>1138 := @ToObject(this) @ #853
    [1] <>temp<>1139 := <>move<>1129
    [2] <>arguments<>1140 := allocArg(1) @ #854
    [3] <>arguments<>1140["0"] := <>temp<>1139
    [4] <>fun<>1141 := @ToObject(<>obj<>1138["jumpTo"]) @ #855
    [5] <>this<> := enterCode(<>obj<>1138)

  Call[1] -> ExitExc
    [0] call(<>fun<>1141, <>this<>, <>arguments<>1140) @ #856

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>1142)

  Exit[-2]

  ExitExc[-3]

}

function[43] <>funexpr@96:22-97:10<> {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>1172 := @ToObject(this) @ #879
    [1] <>temp<>1173 := <>i<>1170
    [2] <>arguments<>1174 := allocArg(1) @ #880
    [3] <>arguments<>1174["0"] := <>temp<>1173
    [4] <>fun<>1175 := @ToObject(<>obj<>1172["handleClick"]) @ #881
    [5] <>this<> := enterCode(<>obj<>1172)

  Call[1] -> ExitExc
    [0] call(<>fun<>1175, <>this<>, <>arguments<>1174) @ #882

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>1176)

  Exit[-2]

  ExitExc[-3]

}


