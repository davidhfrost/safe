Heap: {
  #Global: {
    "React": <#React, F, F, F>,
    "ReactDOM": <#ReactDOM, F, F, F>,
    "printRenderedObject": <#printRenderedObject, F, F, F>
  },


  #React: {
    "createElement": <#React.createElement, F, F, F>,
    "Component": <#React.Component, F, F, F>,
  },
  #React.Component: {
    [[Class]]: "Function",
    [[Construct]]: fun(5),
    [[Extensible]]: true,
    "prototype": <#React.Component.prototype, F, F, F>
  },
  #React.Component.prototype: {
    "__class__": <true, F, F, F>
  },
  #React.createElement: {
    [[Class]]: "Function",
    [[Prototype]]: #Function.prototype,
    [[Call]]: fun(1),
    "length": <2.0, F, F, F>
  },


  #ReactDOM: {
    "render": <#ReactDOM.render, F, F, F>,
    "recursiveRender": <#ReactDOM.recursiveRender, F, F, F>
  },
  #ReactDOM.render: {
    [[Class]]: "Function",
    [[Prototype]]: #Function.prototype,
    [[Call]]: fun(2),
    "length": <2.0, F, F, F>
  },
  #ReactDOM.recursiveRender: {
    [[Class]]: "Function",
    [[Prototype]]: #Function.prototype,
    [[Call]]: fun(3),
    "length": <1, F, F, F>
  },


  #printRenderedObject: {
    [[Class]]: "Function",
    [[Prototype]]: #Function.prototype,
    [[Call]]: fun(4),
    "length": <2.0, F, F, F>
  },
}

Function: {
  1: [\\
  function createElement(type, props, children) {
    if (props === null) props = {};

    var childArray = [];

    for (var i = 2; i < arguments.length; i++) {
      var child = arguments[i];
      if (child === null) continue;

      if (Array.isArray(child)) {
        for (var j = 0; j < child.length; j++) {
          childArray.push(child[j]);
        }
      } else {
        childArray.push(child);
      }
    }

    props.children = childArray;

    return { type: type, props: props };
  }
  \\],
  2: [\\
  function render(element, container) {
    var renderedElement = ReactDOM.recursiveRender(element);
    return renderedElement;
  }
  \\],
  3: [\\
  function recursiveRender(element) {
    var renderedElement;

    // HTML element component
    if (typeof element.type === "string") {
      // recursively render children into an array
      var children = [];

      for (var i = 0; i < element.props.children.length; i++) {
        var child = element.props.children[i];
        if (typeof child === 'string') {
          children[i] = child;
        } else {
          children[i] = ReactDOM.render(child);
        }
      }

      renderedElement = {
        type: element.type,
        props: { children: children },
      };
    }
    // class component
    else if (element.type.prototype.__class__) {
      var instance = new element.type();
      instance.props = element.props;
      var rendered = ReactDOM.render(instance.render());
      rendered.instance = instance;
      renderedElement = rendered;
    }
    // function component
    else {
      renderedElement = ReactDOM.render(element.type(element.props));
    }

    @ReactRender(renderedElement, '');
    return renderedElement;
  }
  \\],
  4: [\\
  function printRenderedObject(rendered, indent) {
    var children = rendered.props.children;
    var result = '';

    result += '<' + rendered.type + '>';
    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      if (typeof child === 'string') {
        result += child;
      } else {
        result += printRenderedObject(children[i]);
      }
    }
    result += '</' + rendered.type + '>';

    return result;
  }
  \\],
  5: [\\
  function Component() {
    // React.Component constructor
  }
  \\],
}
